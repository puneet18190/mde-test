{
    "project": {
        "name": "DESY",
        "description": "Digital Education SYstem",
        "version": "1.0.0",
        "url": "http://desy.morganspa.com/"
    },
    "files": {
        "app/assets/javascripts/admin/functions.js": {
            "name": "app/assets/javascripts/admin/functions.js",
            "modules": {
                "admin": 1
            },
            "classes": {},
            "fors": {
                "AdminAutocomplete": 1,
                "AdminBrowserSupport": 1,
                "AdminCollapsed": 1,
                "AdminDocumentReady": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/browser_not_supported/application.js": {
            "name": "app/assets/javascripts/browser_not_supported/application.js",
            "modules": {
                "browser-support": 1
            },
            "classes": {},
            "fors": {
                "BrowserSupportMain": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/ajax_loader.js": {
            "name": "app/assets/javascripts/ajax_loader.js",
            "modules": {
                "ajax-loader": 1
            },
            "classes": {},
            "fors": {
                "AjaxLoaderBinder": 1,
                "AjaxLoaderDocumentReady": 1,
                "AjaxLoaderVisibility": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/audio_editor.js": {
            "name": "app/assets/javascripts/audio_editor.js",
            "modules": {
                "audio-editor": 1
            },
            "classes": {},
            "fors": {
                "AudioEditorComponents": 1,
                "AudioEditorCutters": 1,
                "AudioEditorDocumentReady": 1,
                "AudioEditorGalleries": 1,
                "AudioEditorGeneral": 1,
                "AudioEditorGraphics": 1,
                "AudioEditorPreview": 1,
                "AudioEditorScrollpain": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/buttons.js": {
            "name": "app/assets/javascripts/buttons.js",
            "modules": {
                "buttons": 1
            },
            "classes": {},
            "fors": {
                "ButtonsAccessories": 1,
                "ButtonsDocumentReady": 1,
                "ButtonsLesson": 1,
                "ButtonsMediaElement": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/dashboard.js": {
            "name": "app/assets/javascripts/dashboard.js",
            "modules": {
                "dashboard": 1
            },
            "classes": {},
            "fors": {
                "DashboardAccessories": 1,
                "DashboardExpandedContents": 1,
                "DashboardLessonDescriptions": 1,
                "DashboardResizing": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/dialogs.js": {
            "name": "app/assets/javascripts/dialogs.js",
            "modules": {
                "dialogs": 1
            },
            "classes": {},
            "fors": {
                "DialogsAccessories": 1,
                "DialogsConfirmation": 1,
                "DialogsGalleries": 1,
                "DialogsTimed": 1,
                "DialogsWithForm": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/galleries.js": {
            "name": "app/assets/javascripts/galleries.js",
            "modules": {
                "galleries": 1
            },
            "classes": {},
            "fors": {
                "GalleriesAccessories": 1,
                "GalleriesDocumentReady": 1,
                "GalleriesInitializers": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/general.js": {
            "name": "app/assets/javascripts/general.js",
            "modules": {
                "general": 1
            },
            "classes": {},
            "fors": {
                "GeneralCentering": 1,
                "GeneralDocumentReady": 1,
                "GeneralMiscellanea": 1,
                "GeneralUrls": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/image_editor.js": {
            "name": "app/assets/javascripts/image_editor.js",
            "modules": {
                "image-editor": 1
            },
            "classes": {},
            "fors": {
                "ImageEditorDocumentReady": 1,
                "ImageEditorGraphics": 1,
                "ImageEditorImageScale": 1,
                "ImageEditorTexts": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/jquery_browser.js": {
            "name": "app/assets/javascripts/jquery_browser.js",
            "modules": {
                "jquery-browsers": 1
            },
            "classes": {},
            "fors": {
                "JqueryBrowsersDetection": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/jquery_patches.js": {
            "name": "app/assets/javascripts/jquery_patches.js",
            "modules": {
                "jquery-patches": 1
            },
            "classes": {},
            "fors": {
                "JqueryPatchesBrowsers": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/lesson_editor.js": {
            "name": "app/assets/javascripts/lesson_editor.js",
            "modules": {
                "lesson-editor": 1
            },
            "classes": {},
            "fors": {
                "LessonEditorCurrentSlide": 1,
                "LessonEditorDocumentReady": 1,
                "LessonEditorForms": 1,
                "LessonEditorGalleries": 1,
                "LessonEditorImageResizing": 1,
                "LessonEditorJqueryAnimations": 1,
                "LessonEditorSlideLoading": 1,
                "LessonEditorSlidesNavigation": 1,
                "LessonEditorTinyMCE": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/lesson_viewer.js": {
            "name": "app/assets/javascripts/lesson_viewer.js",
            "modules": {
                "lesson-viewer": 1
            },
            "classes": {},
            "fors": {
                "LessonViewerDocumentReady": 1,
                "LessonViewerGeneral": 1,
                "LessonViewerGraphics": 1,
                "LessonViewerPlaylist": 1,
                "LessonViewerSlidesNavigation": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/media_element_editor.js": {
            "name": "app/assets/javascripts/media_element_editor.js",
            "modules": {
                "media-element-editor": 1
            },
            "classes": {},
            "fors": {
                "MediaElementEditorCache": 1,
                "MediaElementEditorConversion": 1,
                "MediaElementEditorDocumentReady": 1,
                "MediaElementEditorForms": 1,
                "MediaElementEditorHorizontalTimelines": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/notifications.js": {
            "name": "app/assets/javascripts/notifications.js",
            "modules": {
                "notifications": 1
            },
            "classes": {},
            "fors": {
                "NotificationsAccessories": 1,
                "NotificationsDocumentReady": 1,
                "NotificationsGraphics": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/players.js": {
            "name": "app/assets/javascripts/players.js",
            "modules": {
                "players": 1
            },
            "classes": {},
            "fors": {
                "PlayersAudioEditor": 1,
                "PlayersCommon": 1,
                "PlayersDocumentReady": 1,
                "PlayersGeneral": 1,
                "PlayersVideoEditor": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/profile.js": {
            "name": "app/assets/javascripts/profile.js",
            "modules": {
                "profile": 1
            },
            "classes": {},
            "fors": {
                "ProfilePrelogin": 1,
                "ProfileUsers": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/search.js": {
            "name": "app/assets/javascripts/search.js",
            "modules": {
                "search": 1
            },
            "classes": {},
            "fors": {
                "SearchDocumentReady": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/tags.js": {
            "name": "app/assets/javascripts/tags.js",
            "modules": {
                "tags": 1
            },
            "classes": {},
            "fors": {
                "TagsAccessories": 1,
                "TagsInitializers": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/uploader.js": {
            "name": "app/assets/javascripts/uploader.js",
            "modules": {
                "uploader": 1
            },
            "classes": {},
            "fors": {
                "UploaderDocumentReady": 1,
                "UploaderGlobal": 1,
                "UploaderLoadingBar": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/video_editor.js": {
            "name": "app/assets/javascripts/video_editor.js",
            "modules": {
                "video-editor": 1
            },
            "classes": {},
            "fors": {
                "VideoEditorAddComponents": 1,
                "VideoEditorComponents": 1,
                "VideoEditorCutters": 1,
                "VideoEditorDocumentReady": 1,
                "VideoEditorGalleries": 1,
                "VideoEditorGeneral": 1,
                "VideoEditorPreview": 1,
                "VideoEditorPreviewAccessories": 1,
                "VideoEditorReplaceComponents": 1,
                "VideoEditorScrollPain": 1,
                "VideoEditorTextComponentEditor": 1
            },
            "namespaces": {}
        },
        "app/assets/javascripts/virtual_classroom.js": {
            "name": "app/assets/javascripts/virtual_classroom.js",
            "modules": {
                "virtual-classroom": 1
            },
            "classes": {},
            "fors": {
                "VirtualClassroomDocumentReady": 1,
                "VirtualClassroomJavaScriptAnimations": 1,
                "VirtualClassroomMultipleLoading": 1,
                "VirtualClassroomSendLink": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "admin": {
            "name": "admin",
            "submodules": {},
            "classes": {
                "AdminAutocomplete": 1,
                "AdminBrowserSupport": 1,
                "AdminCollapsed": 1,
                "AdminDocumentReady": 1
            },
            "fors": {
                "AdminAutocomplete": 1,
                "AdminBrowserSupport": 1,
                "AdminCollapsed": 1,
                "AdminDocumentReady": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 1,
            "description": "Functions used in the Administration section: only for this section, <b>it's generated a separate file</b> which doesn't merge with the regular one. The only external module loaded is {{#crossLinkModule \"ajax-loader\"}}{{/crossLinkModule}}."
        },
        "browser-support": {
            "name": "browser-support",
            "submodules": {},
            "classes": {
                "BrowserSupportMain": 1
            },
            "fors": {
                "BrowserSupportMain": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/browser_not_supported/application.js",
            "line": 1,
            "description": "Browser support checking functions"
        },
        "ajax-loader": {
            "name": "ajax-loader",
            "submodules": {},
            "classes": {
                "AjaxLoaderBinder": 1,
                "AjaxLoaderDocumentReady": 1,
                "AjaxLoaderVisibility": 1
            },
            "fors": {
                "AjaxLoaderBinder": 1,
                "AjaxLoaderDocumentReady": 1,
                "AjaxLoaderVisibility": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/ajax_loader.js",
            "line": 1,
            "description": "Here it's defined the general <b>ajax loader</b> of the application."
        },
        "audio-editor": {
            "name": "audio-editor",
            "submodules": {},
            "classes": {
                "AudioEditorComponents": 1,
                "AudioEditorCutters": 1,
                "AudioEditorDocumentReady": 1,
                "AudioEditorGalleries": 1,
                "AudioEditorGeneral": 1,
                "AudioEditorGraphics": 1,
                "AudioEditorPreview": 1,
                "AudioEditorScrollpain": 1
            },
            "fors": {
                "AudioEditorComponents": 1,
                "AudioEditorCutters": 1,
                "AudioEditorDocumentReady": 1,
                "AudioEditorGalleries": 1,
                "AudioEditorGeneral": 1,
                "AudioEditorGraphics": 1,
                "AudioEditorPreview": 1,
                "AudioEditorScrollpain": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 1,
            "description": "This module contains javascript functions used to animate the Audio Editor. The editing of an audio consists in cutting and connecting together different elements of type audio (referred to as <b>audio components</b>): each component has a unique <b>identifier</b>, to be distinguished by the ID in the database of the corresponding audio.\n<br/><br/>\nEach audio component contains a <b>cutter</b> (used to select a portion of the original audio), the standard player controls, and a <b>sorting handle</b>. To use the controls of a component, first it must be <b>selected</b> (using the function {{#crossLink \"AudioEditorComponents/selectAudioEditorComponent:method\"}}{{/crossLink}}): if a component is not selected, it's shown with opacity and without the player controls. The functionality of sorting components is handled in {{#crossLink \"AudioEditorDocumentReady/audioEditorDocumentReadyGeneral:method\"}}{{/crossLink}}; the functionalities of player commands, together with the most important functionalities of the cutter, are located in the module {{#crossLinkModule \"players\"}}{{/crossLinkModule}} (class {{#crossLink \"PlayersAudioEditor\"}}{{/crossLink}}); the only functionalities of the cutter located in this module are found in the class {{#crossLink \"AudioEditorCutters\"}}{{/crossLink}} and in the method {{#crossLink \"AudioEditorDocumentReady/audioEditorDocumentReadyCutters:method\"}}{{/crossLink}} (functionality of precision arrows).\n<br/><br/>\nOn the top of the right column are positioned the time durations (updated with {{#crossLink \"AudioEditorComponents/changeDurationAudioEditorComponent:method\"}}{{/crossLink}}), ad the button 'plus' used to open the audio gallery (see the class {{#crossLink \"AudioEditorGalleries\"}}{{/crossLink}} and the method {{#crossLink \"AudioEditorDocumentReady/audioEditorDocumentReadyGeneral:method\"}}{{/crossLink}}).\n<br/><br/>\nOn the bottom of the right column are positioned the controls for the <b>global preview</b> (which plays all the components globally). Similarly to the module {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}, before playing the global preview the system must enter in <b>preview mode</b>: the difference is that in the Audio Editor this mode is switched automatically by the system, whereas in the Video Editor it's the user who decides to enter and leave the preview mode. To enter in preview mode we use the method {{#crossLink \"AudioEditorPreview/enterAudioEditorPreviewMode:method\"}}{{/crossLink}}, which calls {{#crossLink \"AudioEditorPreview/switchAudioComponentsToPreviewMode:method\"}}{{/crossLink}} or each component. A component in preview mode can be <b>selected</b> (using a differente method respect to the normal component selection: see {{#crossLink \"AudioEditorPreview/selectAudioEditorComponentInPreviewMode:method\"}}{{/crossLink}}). Each component in the global preview is played using the method {{#crossLink \"AudioEditorPreview/startAudioEditorPreview:method\"}}{{/crossLink}} (to which we pass the component to start with); the main part of the functionality of passing from a component to the next one during the global preview is handled in the module {{#crossLinkModule \"players\"}}{{/crossLinkModule}} (more specificly, in the method {{#crossLink \"PlayersAudioEditor/initializeActionOfMediaTimeUpdaterInAudioEditor:method\"}}{{/crossLink}}.\n<br/><br/>\nAs for the other Element Editors ({{#crossLinkModule \"image-editor\"}}{{/crossLinkModule}}, {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}) the core of the process of committing changes is handled in the module {{#crossLinkModule \"media-element-editor\"}}{{/crossLinkModule}} (more specificly in the class {{#crossLink \"MediaElementEditorForms\"}}{{/crossLink}}); the part of this functionality specific for the Audio Editor is handled in {{#crossLink \"MediaElementEditorDocumentReady/mediaElementEditorDocumentReady:method\"}}{{/crossLink}}."
        },
        "buttons": {
            "name": "buttons",
            "submodules": {},
            "classes": {
                "ButtonsAccessories": 1,
                "ButtonsDocumentReady": 1,
                "ButtonsLesson": 1,
                "ButtonsMediaElement": 1
            },
            "fors": {
                "ButtonsAccessories": 1,
                "ButtonsDocumentReady": 1,
                "ButtonsLesson": 1,
                "ButtonsMediaElement": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/buttons.js",
            "line": 1,
            "description": "Lessons and Elements actions triggered via buttons."
        },
        "dashboard": {
            "name": "dashboard",
            "submodules": {},
            "classes": {
                "DashboardAccessories": 1,
                "DashboardExpandedContents": 1,
                "DashboardLessonDescriptions": 1,
                "DashboardResizing": 1
            },
            "fors": {
                "DashboardAccessories": 1,
                "DashboardExpandedContents": 1,
                "DashboardLessonDescriptions": 1,
                "DashboardResizing": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/dashboard.js",
            "line": 1,
            "description": "The dashboard contains a list of suggested lessons and media elements. The dashboard is the first page shown to the logged user.\n<br/><br/>\nWhen the dashboard is opened at first, it's possible to see two subsections, one containing elements and the other one containing lessons. The number of items shown depends on the browser, this functionality is handled by the class {{#crossLink \"DashboardResizing\"}}{{/crossLink}}. At any time the user resizes the window, the application calls the server that responds with index.js (see {{#crossLink \"DashboardAccessories/dashboardDocumentReady:method\"}}{{/crossLink}}).\n<br/><br/>\nClicking on a special icon, the section of lessons or media elements can be expanded or compressed: this functionality is handled in {{#crossLink \"DashboardExpandedContents\"}}{{/crossLink}}. Finally, a single lesson has its own expansion that opens a div containing description, author and subject: see functions in the class {{#crossLink \"DashboardLessonDescriptions\"}}{{/crossLink}}."
        },
        "dialogs": {
            "name": "dialogs",
            "submodules": {},
            "classes": {
                "DialogsAccessories": 1,
                "DialogsConfirmation": 1,
                "DialogsGalleries": 1,
                "DialogsTimed": 1,
                "DialogsWithForm": 1
            },
            "fors": {
                "DialogsAccessories": 1,
                "DialogsConfirmation": 1,
                "DialogsGalleries": 1,
                "DialogsTimed": 1,
                "DialogsWithForm": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/dialogs.js",
            "line": 1,
            "description": "This module contains the javascript functions that use JQueryUi dialogs. Some of them are closed with a time delay (class {{#crossLink \"DialogsTimed\"}}{{/crossLink}}), other are closed with buttons by the user (class {{#crossLink \"DialogsConfirmation\"}}{{/crossLink}}), and other ones contain a form to be filled in by the user (class {{#crossLink \"DialogsWithForm\"}}{{/crossLink}})."
        },
        "galleries": {
            "name": "galleries",
            "submodules": {},
            "classes": {
                "GalleriesAccessories": 1,
                "GalleriesDocumentReady": 1,
                "GalleriesInitializers": 1
            },
            "fors": {
                "GalleriesAccessories": 1,
                "GalleriesDocumentReady": 1,
                "GalleriesInitializers": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/galleries.js",
            "line": 1,
            "description": "The galleries are containers of media elements, used at any time the user needs to pick an element of a specific type.\n<br/><br/>\nThere are three kinds of gallery, each of them has specific features depending on where it's used. Each instance of a gallery is provided of its specific url route, that performs the speficic javascript actions it requires. For instance, in the image gallery contained inside the {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}, to each image popup (see also {{#crossLink \"DialogsGalleries/showImageInGalleryPopUp:method\"}}{{/crossLink}}) is attached additional HTML code that contains the input for inserting the duration of the image component. Each gallery is also provided of infinite scroll pagination, which is initialized in the methods of {{#crossLink \"GalleriesInitializers\"}}{{/crossLink}}. The complete list of galleries is:\n<br/>\n<ul>\n  <li>\n    <b>audio gallery</b>, whose occurrences are\n    <ul>\n      <li>in Audio Editor, initialized by {{#crossLink \"GalleriesInitializers/initializeAudioGalleryInAudioEditor:method\"}}{{/crossLink}}</li>\n      <li>in Lesson Editor, initialized by {{#crossLink \"GalleriesInitializers/initializeAudioGalleryInLessonEditor:method\"}}{{/crossLink}}</li>\n      <li>in Video Editor, initialized by {{#crossLink \"GalleriesInitializers/initializeAudioGalleryInVideoEditor:method\"}}{{/crossLink}}</li>\n    </ul>\n  </li>\n  <li>\n    <b>image gallery</b>, whose occurrences are\n    <ul>\n      <li>in Image Editor, initialized by {{#crossLink \"GalleriesInitializers/initializeImageGalleryInImageEditor:method\"}}{{/crossLink}}</li>\n      <li>in Lesson Editor, initialized by {{#crossLink \"GalleriesInitializers/initializeImageGalleryInLessonEditor:method\"}}{{/crossLink}}</li>\n      <li>in the mixed gallery of Video Editor, initialized by {{#crossLink \"GalleriesInitializers/initializeMixedGalleryInVideoEditor:method\"}}{{/crossLink}}</li>\n    </ul>\n  </li>\n  <li>\n    <b>video gallery</b>, whose occurrences are\n    <ul>\n      <li>in Lesson Editor, initialized by {{#crossLink \"GalleriesInitializers/initializeVideoGalleryInLessonEditor:method\"}}{{/crossLink}}</li>\n      <li>in the mixed gallery of Video Editor, initialized by {{#crossLink \"GalleriesInitializers/initializeMixedGalleryInVideoEditor:method\"}}{{/crossLink}}.</li>\n    </ul>\n  </li>\n</ul>"
        },
        "general": {
            "name": "general",
            "submodules": {},
            "classes": {
                "GeneralCentering": 1,
                "GeneralDocumentReady": 1,
                "GeneralMiscellanea": 1,
                "GeneralUrls": 1
            },
            "fors": {
                "GeneralCentering": 1,
                "GeneralDocumentReady": 1,
                "GeneralMiscellanea": 1,
                "GeneralUrls": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/general.js",
            "line": 1,
            "description": "Generic javascript functions user throughout the application."
        },
        "image-editor": {
            "name": "image-editor",
            "submodules": {},
            "classes": {
                "ImageEditorDocumentReady": 1,
                "ImageEditorGraphics": 1,
                "ImageEditorImageScale": 1,
                "ImageEditorTexts": 1
            },
            "fors": {
                "ImageEditorDocumentReady": 1,
                "ImageEditorGraphics": 1,
                "ImageEditorImageScale": 1,
                "ImageEditorTexts": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/image_editor.js",
            "line": 1,
            "description": "The Image Editor can perform two kinds of operations on an image: <b>crop selection</b>, and <b>insertion of texts</b>.\n<br/><br/>\nThe editor is structured as follows: in the center of the screen is located the image under modification, scaled to fit the available space but conserving its original proportions (the coordinates are extracted using the method {{#crossLink \"ImageEditorImageScale/getRelativePositionInImageEditor:method\"}}{{/crossLink}}); the column on the left contains the icons for both available actions.\n<br/><br/>\nClicking on the icon 'crop', the user enters in the <b>crop mode</b>: the image is sensible to the action of clicking and dragging, and reacts showing a selected area with the rest of the image shadowed (see the initializer {{#crossLink \"ImageEditorDocumentReady/imageEditorDocumentReadyCrop:method\"}}{{/crossLink}}). Similarly, clicking on the icon 'texts', the user enters in <b>texts insertion mode</b>: this means that clicking on the image he can create small editable text areas that will be added on the image (see the initializer {{#crossLink \"ImageEditorDocumentReady/imageEditorDocumentReadyTexts:method\"}}{{/crossLink}} and the class {{#crossLink \"ImageEditorTexts\"}}{{/crossLink}}). While the user is in crop mode or texts insertion mode, he can come back to the initial status of the editor clicking on one of the two buttons on the bottom right corner of the image: <b>cancel</b> resets the mode without applying the modifications, and <b>apply</b> does the same but saving the image first (the graphics of these operations is handled in the class {{#crossLink \"ImageEditorGraphics\"}}{{/crossLink}}).\n<br/><br/>\nThe image in editing is conserved in a temporary folder, together with the version of the image before the last step of editing. Each time a new operation is performed, the temporary image is saved in the place of its old version: this way it's always possible to undo the last operation (there is a specific route for this, initialized in the method {{#crossLink \"ImageEditorDocumentReady/imageEditorDocumentReadyUndo:method\"}}{{/crossLink}}).\n<br/><br/>\nAs for the other Element Editors ({{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}, {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}) the core of the process of committing changes is handled in the module {{#crossLinkModule \"media-element-editor\"}}{{/crossLinkModule}} (more specificly in the class {{#crossLink \"MediaElementEditorForms\"}}{{/crossLink}}); the part of this functionality specific for the Image Editor is handled in {{#crossLink \"MediaElementEditorDocumentReady/mediaElementEditorDocumentReady:method\"}}{{/crossLink}}."
        },
        "jquery-browsers": {
            "name": "jquery-browsers",
            "submodules": {},
            "classes": {
                "JqueryBrowsersDetection": 1
            },
            "fors": {
                "JqueryBrowsersDetection": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/jquery_browser.js",
            "line": 1,
            "description": "This module contains browser matcher for JQuery.\n<br/><br/>\nIt is used in the module {{#crossLinkModule \"jquery-patches\"}}{{/crossLinkModule}} where it's defined a set of functions that handle different behaviors depending on the browser (the patches are based on the variable $.browser defined in this module).\n<br/><br/>\nIt is used also in the module {{#crossLinkModule \"browser-support\"}}{{/crossLinkModule}}, where it's defined the function {{#crossLink \"BrowserSupportMain/browserSupportMain:method\"}}{{/crossLink}}, which handles the browsers not supported by the application.\n<br/><br/>\nFinally, the two empty functions {{#crossLink \"AdminBrowserSupport/adminBrowserSupport:method\"}}{{/crossLink}} and {{#crossLink \"GeneralMiscellanea/browserSupport:method\"}}{{/crossLink}} are the links in the respective files application.js (one for admin and one for general / lesson_archive) of the function above.\n<br/><br/>\nImportant: in lesson_scorm application.js there are not any calls to any of the modules {{#crossLinkModule \"jquery-browsers\"}}{{/crossLinkModule}}, {{#crossLinkModule \"jquery-patches\"}}{{/crossLinkModule}}, nor {{#crossLinkModule \"browser-support\"}}{{/crossLinkModule}}.\n<br/><br/>\nNote by the developer: \"Limit scope pollution from any deprecated API\"."
        },
        "jquery-patches": {
            "name": "jquery-patches",
            "submodules": {},
            "classes": {
                "JqueryPatchesBrowsers": 1
            },
            "fors": {
                "JqueryPatchesBrowsers": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/jquery_patches.js",
            "line": 1,
            "description": "This module contains all the patches for JQuery. Notice that the methods listed here sometimes are defined using anonimous functions fired in this same file: this is because in the javascript loading tree these functions can be loaded where the application needs, rather than in the file <i>document_ready.js</i>.\n<br/><br/>\nSo far the only class present in the module is {{#crossLink \"JqueryPatchesBrowsers\"}}{{/crossLink}}, used to detect browsers. The functions in this class differ by {{#crossLink \"AdminDocumentReady/adminBrowsersDocumentReady:method\"}}{{/crossLink}} and {{#crossLink \"GeneralDocumentReady/browsersDocumentReady:method\"}}{{/crossLink}} because instead of adding a class to the HTML tag they create an attribute for a JQuery object."
        },
        "lesson-editor": {
            "name": "lesson-editor",
            "submodules": {},
            "classes": {
                "LessonEditorCurrentSlide": 1,
                "LessonEditorDocumentReady": 1,
                "LessonEditorForms": 1,
                "LessonEditorGalleries": 1,
                "LessonEditorImageResizing": 1,
                "LessonEditorJqueryAnimations": 1,
                "LessonEditorSlideLoading": 1,
                "LessonEditorSlidesNavigation": 1,
                "LessonEditorTinyMCE": 1
            },
            "fors": {
                "LessonEditorCurrentSlide": 1,
                "LessonEditorDocumentReady": 1,
                "LessonEditorForms": 1,
                "LessonEditorGalleries": 1,
                "LessonEditorImageResizing": 1,
                "LessonEditorJqueryAnimations": 1,
                "LessonEditorSlideLoading": 1,
                "LessonEditorSlidesNavigation": 1,
                "LessonEditorTinyMCE": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1,
            "description": "The Lesson Editor is used to add and edit slides to a private lesson.\n<br/><br/>\nWhen opening the Editor on a lesson, all its slides are appended to a queue, of which it's visible only the portion that surrounds the <b>current slide</b> (the width of such a portion depends on the screen resolution, see {{#crossLink \"LessonEditorSlidesNavigation/initLessonEditorPositions:method\"}}{{/crossLink}} and {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadyResize:method\"}}{{/crossLink}}). The current slide is illuminated and editable, whereas the adhiacent slides are covered by a layer with opacity that prevents the user from editing them: if the user clicks on this layer, the application takes the slide below it as new current slide and moves it to the center of the screen (see {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadySlidesNavigator:method\"}}{{/crossLink}} and the methods in {{#crossLink \"LessonEditorSlidesNavigation\"}}{{/crossLink}}): only after this operation, the user can edit that particular slide. To avoid overloading when there are many slides containing media, the slides are instanced all together but their content is loaded only when the user moves to them (see the methods in {{#crossLink \"LessonEditorSlideLoading\"}}{{/crossLink}}).\n<br/><br/>\nOn the right side of each slide the user finds a list of <b>buttons</b> (initialized in {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadySlideButtons:method\"}}{{/crossLink}}): each button corresponds either to an action that can be performed on the slide, either to an action that can be performed to the whole lesson (for instance, save and exit, or edit title description and tags).\n<br/><br/>\nThe <b>tool to navigate the slides</b> is located on the top of the editor: each small square represents a slide (with its position), and passing with the mouse over it the Editor shows a miniature of the corresponding slide (these functionalities are initialized in {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadySlidesNavigator:method\"}}{{/crossLink}}). Clicking on a slide miniature, the application moves to that slide using the function {{#crossLink \"LessonEditorSlidesNavigation/slideTo:method\"}}{{/crossLink}}. The slides can be sorted dragging with the mouse (using the JQueryUi plugin, initialized in {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadyJqueryAnimations:method\"}}{{/crossLink}} and {{#crossLink \"LessonEditorJqueryAnimations/initializeSortableNavs:method\"}}{{/crossLink}}).\n<br/><br/>\nInside the Editor, there are two operations that require hiding and replacement of the queue of slides: <b>adding a media element to a slide</b> and <b>choosing a new slide</b>. In both these operations, an HTML div is extracted from the main template (where it was hidden), and put in the place of the current slide, hiding the rest of the slides queue, buttons, and slides navigation (operations performed by {{#crossLink \"LessonEditorCurrentSlide/hideEverythingOutCurrentSlide:method\"}}{{/crossLink}}). For the galleries, the extracted div must be filled by an action called via Ajax (see the module {{#crossLinkModule \"galleries\"}}{{/crossLinkModule}}), whereas the div with the list of available slides is already loaded with the Editor (see {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadyNewSlideChoice:method\"}}{{/crossLink}}).\n<br/><br/>\nTo add a media element to a slide, the user picks it from its specific gallery: when he clicks on the button 'plus', the system calls the corresponding subfunction in {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadyAddMediaElement:method\"}}{{/crossLink}}. To avoid troubles due to the replacement of JQuery plugins, video and audio tags, etc, this method always replaces the sources of <b>audio</b> and <b>video</b> tags and calls <i>load()</i>.\n<br/><br/>\nIf the element added is of type <b>image</b>, the user may drag it inside the slide, using {{#crossLink \"LessonEditorJqueryAnimations/makeDraggable:method\"}}{{/crossLink}}. A set of methods (in the class {{#crossLink \"LessonEditorImageResizing\"}}{{/crossLink}}) is available to resize the image and the alignment chosen by the user; more specificly, the method {{#crossLink \"LessonEditorImageResizing/isHorizontalMask:method\"}}{{/crossLink}} is used to understand, depending on the type of slide and on the proportions of the image, if the image is <b>vertical</b> (and then the user can drag it vertically) or <b>horizontal</b> (the user can drag it horizontally).\n<br/><br/>\nEach slide contains a form linked to the action that updates it, there is no global saving for the whole lesson. The slide is automaticly saved (using the method {{#crossLink \"LessonEditorForms/saveCurrentSlide:method\"}}{{/crossLink}}) <i>before moving to another slide</i>, <i>before showing the options to add a new slide</i>, and <i>before changing position of a slide</i>. The same function is called by the user when he clicks on the button 'save' on the right of each slide; the buttons <b>save and exit</b> and <b>edit general info</b> are also linked to slide saving, but in this case it's performed with a callback (see again the buttons initialization in {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadySlideButtons:method\"}}{{/crossLink}}).\n<br/><br/>\nThe text slides are provided of <b>TinyMCE</b> text editor, initialized in the methods of {{#crossLink \"LessonEditorTinyMCE\"}}{{/crossLink}}."
        },
        "lesson-viewer": {
            "name": "lesson-viewer",
            "submodules": {},
            "classes": {
                "LessonViewerDocumentReady": 1,
                "LessonViewerGeneral": 1,
                "LessonViewerGraphics": 1,
                "LessonViewerPlaylist": 1,
                "LessonViewerSlidesNavigation": 1
            },
            "fors": {
                "LessonViewerDocumentReady": 1,
                "LessonViewerGeneral": 1,
                "LessonViewerGraphics": 1,
                "LessonViewerPlaylist": 1,
                "LessonViewerSlidesNavigation": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 1,
            "description": "The Lesson Viewer is the instrument to reporoduce single and multiple lessons (playlists). The Viewer provides the user of a screen containing the current slide with <b>two arrows</b> to switch to the next one. If the lesson is being reproduced inside a playlist, it's additionally available a <b>playlst menu</b> (opened on the bottom of the current slide).\n<br/><br/>\nThe main methods of this module are {{#crossLink \"LessonViewerSlidesNavigation/slideToInLessonViewer:method\"}}{{/crossLink}} (moves to a given slide) and {{#crossLink \"LessonViewerPlaylist/switchLessonInPlaylistMenuLessonViewer:method\"}}{{/crossLink}} (moves to the first slide of a given lesson and updates the selected lesson in the menu). The first method can be used separately if there is no playlist, or together with the second one if there is one (they are called together inside {{#crossLink \"LessonViewerSlidesNavigation/slideToInLessonViewerWithLessonSwitch:method\"}}{{/crossLink}}).\n<br/><br/>\nAdditionally, {{#crossLink \"LessonViewerPlaylist/switchLessonInPlaylistMenuLessonViewer:method\"}}{{/crossLink}} can be provided of a callback that is passed to {{#crossLink \"LessonViewerPlaylist/selectComponentInLessonViewerPlaylistMenu:method\"}}{{/crossLink}} and executed after the animation of the scroll inside the lesson menu: the callback is used when the user selects a lesson directly from the menu, and {{#crossLink \"LessonViewerSlidesNavigation/slideToInLessonViewer:method\"}}{{/crossLink}} is executed to get to the cover of the selected lesson after that the menu has been closed.\n<br/><br/>\nThere are <b>three known bugs</b> due to the bad quality of the plugin <b>JScrollPain</b>:\n<ul>\n  <li>When the user passes from <i>the first slide of the third lesson</i> to <i>the last slide of the second lesson</i>, the scroll doesn't follow the selection of the new lesson</li>\n  <li>Same problem when the user passes from <i>the last slide of the last lesson</i> to <i>the first slide of the first lesson</i></li>\n  <li>If, after having opened <b>for the first time</b> (and only for that time) the playlist menu, I click before two seconds on a lesson, the menu gets broken</li>\n</ul>"
        },
        "media-element-editor": {
            "name": "media-element-editor",
            "submodules": {},
            "classes": {
                "MediaElementEditorCache": 1,
                "MediaElementEditorConversion": 1,
                "MediaElementEditorDocumentReady": 1,
                "MediaElementEditorForms": 1,
                "MediaElementEditorHorizontalTimelines": 1
            },
            "fors": {
                "MediaElementEditorCache": 1,
                "MediaElementEditorConversion": 1,
                "MediaElementEditorDocumentReady": 1,
                "MediaElementEditorForms": 1,
                "MediaElementEditorHorizontalTimelines": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 1,
            "description": "This module contains javascript functions common to all the editors ({{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}, {{#crossLinkModule \"image-editor\"}}{{/crossLinkModule}}, {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}})."
        },
        "notifications": {
            "name": "notifications",
            "submodules": {},
            "classes": {
                "NotificationsAccessories": 1,
                "NotificationsDocumentReady": 1,
                "NotificationsGraphics": 1
            },
            "fors": {
                "NotificationsAccessories": 1,
                "NotificationsDocumentReady": 1,
                "NotificationsGraphics": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/notifications.js",
            "line": 1,
            "description": "Javascript functions used to handle notifications."
        },
        "players": {
            "name": "players",
            "submodules": {},
            "classes": {
                "PlayersAudioEditor": 1,
                "PlayersCommon": 1,
                "PlayersDocumentReady": 1,
                "PlayersGeneral": 1,
                "PlayersVideoEditor": 1
            },
            "fors": {
                "PlayersAudioEditor": 1,
                "PlayersCommon": 1,
                "PlayersDocumentReady": 1,
                "PlayersGeneral": 1,
                "PlayersVideoEditor": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/players.js",
            "line": 1,
            "description": "This module contains the javascript functions and initializers used in the <b>media players</b> all over the application. The model can be divided into three main classes:\n<ul>\n  <li>{{#crossLink \"PlayersGeneral\"}}{{/crossLink}}, used in the generic players, for instance in {{#crossLinkModule \"lesson-editor\"}}{{/crossLinkModule}} and {{#crossLinkModule \"lesson-viewer\"}}{{/crossLinkModule}}</li>\n  <li>{{#crossLink \"PlayersAudioEditor\"}}{{/crossLink}}, used in the players of the module {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}} (only players of kind <b>audio</b>)</li>\n  <li>{{#crossLink \"PlayersVideoEditor\"}}{{/crossLink}}, used in the players of the module {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}} (mainly players of kind <b>video</b>, but also of kind <b>audio</b> for the background audio track).</li>\n</ul>"
        },
        "profile": {
            "name": "profile",
            "submodules": {},
            "classes": {
                "ProfilePrelogin": 1,
                "ProfileUsers": 1
            },
            "fors": {
                "ProfilePrelogin": 1,
                "ProfileUsers": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/profile.js",
            "line": 1,
            "description": "This module contains the initialization methods for <b>profiling</b> and <b>registration</b> of new users."
        },
        "search": {
            "name": "search",
            "submodules": {},
            "classes": {
                "SearchDocumentReady": 1
            },
            "fors": {
                "SearchDocumentReady": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/search.js",
            "line": 1,
            "description": "Collection of initializers for the graphical effects of the <b>search engine</b>."
        },
        "tags": {
            "name": "tags",
            "submodules": {},
            "classes": {
                "TagsAccessories": 1,
                "TagsInitializers": 1
            },
            "fors": {
                "TagsAccessories": 1,
                "TagsInitializers": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/tags.js",
            "line": 1,
            "description": "The functions in this module handle two different functionalities of <b>autocomplete</b> for tags: suggestions for a research (<b>search autocomplete</b>), and suggestions for tagging lessons and media elements (<b>tagging autocomplete</b>). Both modes use the same JQuery plugin called <i>JQueryAutocomplete</i> (the same used in {{#crossLink \"AdminAutocomplete/initNotificationsAutocomplete:method\"}}{{/crossLink}}).\n<br/><br/>\nThe <b>search</b> autocomplete mode requires a simple initializer (method {{#crossLink \"TagsInitializers/initSearchTagsAutocomplete:method\"}}{{/crossLink}}), which is called for three different keyword inputs of the search engine (the general one, the one for elements and the one for lessons).\n<br/><br/>\nThe <b>tagging</b> autocomplete mode is slightly more complicated, because it must show to the user a friendly view of the tags he added (small boxes with an 'x' to remove it) and at the same time store a string value to be send to the rails backend. The implemented solution is a <b>container</b> div that contains a list of tag <b>boxes</b> (implemented with span, see {{#crossLink \"TagsAccessories/createTagSpan:method\"}}{{/crossLink}}) and an <b>tag input</b> where the user writes; when he inserts a new tag and presses <i>enter</i> or <i>comma</i>, the tag is added to the previous line in the container; if such a line is full, the tag input is moved to the next line; when the lines in the container are over, the tag input gets disabled (see {{#crossLink \"TagsAccessories/disableTagsInputTooHigh:method\"}}{{/crossLink}}). During this whole process, a <b>hidden input</b> gets updated with a string representing the current tags separated by comma ({{#crossLink \"TagsAccessories/addToTagsValue:method\"}}{{/crossLink}}, {{#crossLink \"TagsAccessories/removeFromTagsValue:method\"}}{{/crossLink}}).\n<br/><br/>\nThe system also checks if the inserted tag is not repeated (using {{#crossLink \"TagsAccessories/checkNoTagDuplicates:method\"}}{{/crossLink}}), and assigns a different color for tags already in the database and for new ones ({{#crossLink \"TagsAccessories/addTagWithoutSuggestion:method\"}}{{/crossLink}}).\n<br/><br/>\nThe <b>tagging autocomplete mode</b> is initialized using the scope class '_tags_container' which is unique (see method {{#crossLink \"TagsInitializers/tagsDocumentReady:method\"}}{{/crossLink}})."
        },
        "uploader": {
            "name": "uploader",
            "submodules": {},
            "classes": {
                "UploaderDocumentReady": 1,
                "UploaderGlobal": 1,
                "UploaderLoadingBar": 1
            },
            "fors": {
                "UploaderDocumentReady": 1,
                "UploaderGlobal": 1,
                "UploaderLoadingBar": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/uploader.js",
            "line": 1,
            "description": "Javascript functions used in the media element and document loader.\n<br/><br/>\nThe class {{#crossLink \"UploaderGlobal\"}}{{/crossLink}} contains functions that handle uploading processes in regular sections, such as dashboard, my elements, my documents, and also Lesson Editor ({{#crossLinkModule \"lesson-editor\"}}{{/crossLinkModule}}, see the initializer {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadyUploaderInGallery:method\"}}{{/crossLink}})."
        },
        "video-editor": {
            "name": "video-editor",
            "submodules": {},
            "classes": {
                "VideoEditorAddComponents": 1,
                "VideoEditorComponents": 1,
                "VideoEditorCutters": 1,
                "VideoEditorDocumentReady": 1,
                "VideoEditorGalleries": 1,
                "VideoEditorGeneral": 1,
                "VideoEditorPreview": 1,
                "VideoEditorPreviewAccessories": 1,
                "VideoEditorReplaceComponents": 1,
                "VideoEditorScrollPain": 1,
                "VideoEditorTextComponentEditor": 1
            },
            "fors": {
                "VideoEditorAddComponents": 1,
                "VideoEditorComponents": 1,
                "VideoEditorCutters": 1,
                "VideoEditorDocumentReady": 1,
                "VideoEditorGalleries": 1,
                "VideoEditorGeneral": 1,
                "VideoEditorPreview": 1,
                "VideoEditorPreviewAccessories": 1,
                "VideoEditorReplaceComponents": 1,
                "VideoEditorScrollPain": 1,
                "VideoEditorTextComponentEditor": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1,
            "description": "The Video Editor is structured as follows: centered in the middle of the Editor is located the <b>preview screen</b>, below it the <b>components timeline</b> and the <b>audio track</b>, and on the right the <b>preview column</b> which contains also global statistics about the video.\n<br/><br/>\nA video created with the Video Editor can be composed by <b>three types of components</b> (and optionally an <b>audio track</b>):\n<ul>\n  <li>a <b>video component</b> is an element of type video extracted from the user's gallery, associated to an <b>initial</b> and <b>final time</b></li>\n  <li>a <b>image component</b> is an element of type image extracted from the user's gallery, associated to a <b>duration</b> in seconds (the image is held in the video for a number of seconds equal to the component's duration); the image is centered and cropped maintaining its original proportions, to make it fit in the video screen (which has proportions 16/9)</li>\n  <li>a <b>text component</b> is a centered title for which the user chooses a <b>background color</b>, a <b>font color</b> and a <b>duration</b> (which has the same interpretation as for image components).</li>\n</ul>\nThe resulting video will be the concatenation of all the components inside the timeline, with optionally the chosen audio track as background audio. On the <b>timeline</b> the user may perform the following actions:\n<ul>\n  <li><b>add</b> a new component (see class {{#crossLink \"VideoEditorAddComponents\"}}{{/crossLink}}) or <b>replace</b> an existing one, even without maintaining its original type (see class {{#crossLink \"VideoEditorReplaceComponents\"}}{{/crossLink}}): these functionalities are initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyAddComponent:method\"}}{{/crossLink}}</li>\n  <li><b>remove</b> a component from the timeline (initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyRemoveComponent:method\"}}{{/crossLink}})</li>\n  <li><b>sort</b> and change the order of the components (initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyInitialization:method\"}}{{/crossLink}})</li>\n  <li><b>cut</b> a video component (change its initial and final point) or <b>change duration</b> of an image or text compoent (both these functionalities are initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyCutters:method\"}}{{/crossLink}} and implemented in the class {{#crossLink \"VideoEditorCutters\"}}{{/crossLink}}).</li>\n</ul>\nEach component is provided of its own <b>identifier</b> (similar to the one used in {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}), that is unique and doesn't change on any operation performed by the user. Moreover, regardless of its type, a component is strictly linked with two <b>external accessories</b>:\n<ul>\n  <li>a <b>cutter</b> (whose HTML id is <i>video component [identifier] cutter</i>): this item is normally hidden, when requested it appears below the timeline and is used to cut a video component or change the duration of an image or text component (class {{#crossLink \"VideoEditorCutters\"}}{{/crossLink}})</li>\n  <li>a <b>preview clip</b> (whose HTML id is <i>video component [identifier] preview</i>): this item is hidden inside the <b>preview screen</b>, and it's used\n    <ul>\n      <li>to provide the user of a big clip of the component while handling it (functionality initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyComponentsCommon:method\"}}{{/crossLink}})</li>\n      <li>to play a video component while cutting it (initialized in the method {{#crossLink \"PlayersDocumentReady/playersDocumentReadyVideoEditor:method\"}}{{/crossLink}} in the module {{#crossLinkModule \"players\"}}{{/crossLinkModule}})</li>\n      <li>to be shown in the <b>global preview</b> (see class {{#crossLink \"VideoEditorPreview\"}}{{/crossLink}}).</li>\n    </ul>\n  </li>\n</ul>\nThe method that <b>extracts the identifier from a component</b> is {{#crossLink \"VideoEditorGeneral/getVideoComponentIdentifier:method\"}}{{/crossLink}} (it works receiving as parameter either the component or its cutter or preview clip).\n<br/><br/>\nWhile the user is working, the <b>preview clip</b> visible in the preview screen corresponds to the last component <b>selected</b> by the user. A component gets selected either if the user keeps the mouse on it for more than half a second (using the method {{#crossLink \"VideoEditorComponents/startVideoEditorPreviewClipWithDelay:method\"}}{{/crossLink}}, which avoids compulsive changes inside the preview screen when the user passes with the mouse over the timeline), or immediately on the actions of <b>sorting</b> and <b>cutting</b> (using the method {{#crossLink \"VideoEditorCutters/startVideoEditorPreviewClip:method\"}}{{/crossLink}}): both behaviors are initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyComponentsCommon:method\"}}{{/crossLink}}. To the <b>preview clip</b> of a video component is also associated a method ({{#crossLink \"VideoEditorGeneral/loadVideoComponentIfNotLoadedYet:method\"}}{{/crossLink}}) that loads the HTML5 video tag only when necessary: this, similarly to {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}, avoids overloading of the HTML.\n<br/><br/>\nThe <b>component gallery</b> used inside the Video Editor (initialized in {{#crossLink \"GalleriesInitializers/initializeMixedGalleryInVideoEditor:method\"}}{{/crossLink}}) is the only gallery in the application which contains mixed types of elements. It's divided into three sections, one for each kind of component: the sections for <b>video</b> and <b>image</b> components have the same external behavior of normal image and video galleries (see the module {{#crossLinkModule \"galleries\"}}{{/crossLinkModule}}), whereas the section for <b>text</b> components is a peculiar text editor (see the class {{#crossLink \"VideoEditorTextComponentEditor\"}}{{/crossLink}}). The component gallery (together with the regular audio gallery for the <b>audio track</b>) is initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyGalleries:method\"}}{{/crossLink}}, and its functionality defined in the methods of {{#crossLink \"VideoEditorGalleries\"}}{{/crossLink}} (for instance, the method to switch from a section to another).\n<br/><br/>\nThe method {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyAddComponent:method\"}}{{/crossLink}} initializes the general procedure to <b>add or replace a component</b>. The system sets a HTML <i>data</i> that records if the component gallery was opened to <b>replace</b> or <b>add</b> a component: depending on this data, when the user picks a component from the gallery it's called the corresponding method in {{#crossLink \"VideoEditorAddComponents\"}}{{/crossLink}} or in {{#crossLink \"VideoEditorReplaceComponents\"}}{{/crossLink}}.\n<br/><br/>\nWhen the user adds a component, the system makes a copy of an <b>empty hidden component</b> and fills it with the new data. This behavior is quite similar to the one in {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}, but in the case of Video Editor the procedure is slightly more complicated, due to the following reasons:\n<ul>\n  <li>there are <b>three empty items</b> (empty component, empty cutter, empty preview clip) for each type of component, <b>for a total of nine</b></li>\n  <li>unlike {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}, in the Video Editor each component needs a <b>miniature</b>, that necessarily must be inserted in the empty component <b>together with the rest of the data</b>. For text components, the miniature is built in the moment of the component's creation (there is an <b>empty text miniature</b> hidden in the template of text component editor, see {{#crossLink \"VideoEditorTextComponentEditor\"}}{{/crossLink}}); for video and image components, the miniatures are loaded together with the <b>mixed gallery</b> and stored <b>in the popup of each element</b> (see module {{#crossLinkModule \"galleries\"}}{{/crossLinkModule}}, and especially the <i>js.erb</i> templates associated to the routes of the mixed gallery)\n  <li>in the Video Editor it's possible to <b>replace</b> a component: when the system does this, it's not enough to fill the inputs of the previous component (with {{#crossLink \"VideoEditorComponents/fillVideoEditorSingleParameter:method\"}}{{/crossLink}}): it's additionally necessary to <b>reset the inputs</b> of the previous component, thing done by the method {{#crossLink \"VideoEditorComponents/clearSpecificVideoEditorComponentParameters:method\"}}{{/crossLink}}. Moreover, when replacing a component, the duration is updated using {{#crossLink \"VideoEditorComponents/changeDurationVideoEditorComponent:method\"}}{{/crossLink}}.</li>\n</ul>\nBesides the durations, two graphical details are peculiar to each component: the <b>position</b>, handled by {{#crossLink \"VideoEditorComponents/reloadVideoEditorComponentPositions:method\"}}{{/crossLink}}; and the <b>transition</b>, a small icon representing the <b>fade transition</b> of one second between a component and the following, that must be visible <i>after all components except for the last one</i> (see {{#crossLink \"VideoEditorComponents/resetVisibilityOfVideoEditorTransitions:method\"}}{{/crossLink}}). The operations in which callback it's necessary to reset transitions and positions are <b>sorting</b> ({{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyInitialization:method\"}}{{/crossLink}}) and <b>removing</b> ({{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyRemoveComponent:method\"}}{{/crossLink}}).\n<br/><br/>\nA video component cutter (or simply <b>cutter</b>) is an instrument used to change the initial and final second of a component of type video: it's very similar to the audio cutter, and its functionalities (JQueryUi sliders, players, etc) are defined in {{#crossLink \"PlayersVideoEditor/initializeVideoInVideoEditorPreview:method\"}}{{/crossLink}} and {{#crossLink \"PlayersDocumentReady/playersDocumentReadyVideoEditor:method\"}}{{/crossLink}}. A property that is worth mentioning is the <b>automatic return to the previous integer second</b> when pausing: this is a functionality of both cutters and global reproduction (see {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyPreview:method\"}}{{/crossLink}} and {{#crossLink \"VideoEditorPreview\"}}{{/crossLink}}), necessary to set with precision the current time of the <b>preview screen</b>, in order to simulate faithfully the effect of transitions and the correspondance with the optional audio track.\n<br/><br/>\nFor image and text components, a cutter is simply a small form where the user may insert a new duration (the associated callback is {{#crossLink \"VideoEditorComponents/changeDurationVideoEditorComponent:method\"}}{{/crossLink}}. Since it doesn't fit the whole timeline, this paraticular cutter must be aligned to the JScrollPain: this is done with the functions of the class {{#crossLink \"MediaElementEditorHorizontalTimelines\"}}{{/crossLink}}.\n<br/><br/>\nAll the cutters are initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyCutters:method\"}}{{/crossLink}}, and their functionalities included in the class {{#crossLink \"AudioEditorCutters\"}}{{/crossLink}}.\n<br/><br/>\nThe <b>text component editor</b> can be opened clicking on the icon 'T' in the header of the component editor (see method {{#crossLink \"VideoEditorGalleries/switchToOtherGalleryInMixedGalleryInVideoEditor:method\"}}{{/crossLink}}). The user can insert a text and choose background and text color: the functionality is initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyTextComponentEditor:method\"}}{{/crossLink}}, and the main methods are contained in the class {{#crossLink \"VideoEditorTextComponentEditor\"}}{{/crossLink}}. Notice that, unlike image and video components, the <b>miniature</b> of a text component is created in the moment of the insertion of the compoent (see both {{#crossLink \"VideoEditorAddComponents/addTextComponentInVideoEditor:method\"}}{{/crossLink}} and {{#crossLink \"VideoEditorReplaceComponents/replaceTextComponentInVideoEditor:method\"}}{{/crossLink}}).\n<br/><br/>\nThe <b>optional audio track</b> is added clicking on the button on the bottom. When the user opens the audio gallery and selects an audio, the system automatically sets <i>muted</i> as <i>true</i> in all the video components ({{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyAudioTrack:method\"}}{{/crossLink}}); when adding or replacing a video component (see both {{#crossLink \"VideoEditorAddComponents/addVideoComponentInVideoEditor:method\"}}{{/crossLink}} and {{#crossLink \"VideoEditorReplaceComponents/replaceVideoComponentInVideoEditor:method\"}}{{/crossLink}}) the attribute <i>muted</i> is inserted if an audio track is present.\n<br/><br/>\nThe audio track is handled while playing a video component inside the video cutter (class {{#crossLink \"VideoEditorCutters\"}}{{/crossLink}}): the system ensures that the starting of the audio corresponds to the position of the selected video component inside the whole video, using the methods {{#crossLink \"PlayersDocumentReady/playersDocumentReadyVideoEditor:method\"}}{{/crossLink}} and {{#crossLink \"PlayersVideoEditor/initializeActionOfMediaTimeUpdaterInVideoEditor:method\"}}{{/crossLink}} of the module {{#crossLinkModule \"players\"}}{{/crossLinkModule}}.\n<br/><br/>\nUnlike the {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}, in Video Editor the <b>preview mode</b> is not left automatically when the user stops the global preview: The system has different behaviors for each item in the editor while being in preview mode. While the global preview is playing it sets to true the HTML data <b>preview mode in-use</b>.\n<br/><br/>\nWhile in preview mode, the <b>preview</b> button in the right column is substituted by a button <b>play / pause</b>; the <i>arrow</i> on the bottom used to commit changes (see {{#crossLink \"MediaElementEditorDocumentReady/mediaElementEditorDocumentReady:method\"}}{{/crossLink}}) is replaced by <b>a button 'X'</b> that is used to leave the preview mode. Furthermore, in preview mode many graphical details are slightly changed respect to the normal mode (for instance it's not possible to open the cutters, remove components, etc).\n<br/><br/>\nThe general methods relative to the preview mode are contained in {{#crossLink \"VideoEditorPreview\"}}{{/crossLink}}; the method to enter in preview mode is {{#crossLink \"VideoEditorPreview/openPreviewModeInVideoEditor:method\"}}{{/crossLink}}; the initializer, which contains also the functionality of <b>leaving</b> the preview mode, is {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyPreview:method\"}}{{/crossLink}}.\n<br/><br/>\nWhile in preview mode, it's possible to start the global preview (starting <b>from the selected component at the selected second</b>) using the method {{#crossLink \"VideoEditorPreview/startVideoEditorGlobalPreview:method\"}}{{/crossLink}}: this method is automatically fired with the first component selectedm when the user opens the preview mode for the first time. The method to <b>play a component</b> is {{#crossLink \"VideoEditorPreview/playVideoEditorComponent:method\"}}{{/crossLink}}; the functionality of passing from a component to another is placed in the last method (if the last component was of type <b>image</b> or <b>text</b>), and in {{#crossLink \"PlayersVideoEditor/initializeActionOfMediaTimeUpdaterInVideoEditor:method\"}}{{/crossLink}} (it it's of type <b>video</b>, in which case the behavior differs slightly).\n<br/><br/>\nUnlike in {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}, there are <b>two methods for increasing the global time</b>: the regular one is {{#crossLink \"VideoEditorPreview/increaseVideoEditorPreviewTimer:method\"}}{{/crossLink}} (used to increase the time according to the <b>currentTime</b> of a video component), and the automatic one is {{#crossLink \"VideoEditorPreview/automaticIncreaseVideoEditorPreviewTimer:method\"}}{{/crossLink}} (used for automatic increase while playing image and text components).\n<br/><br/>\nAnother important difference with {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}} is the reproduction of the <b>one second transitions</b> between two components: if the user clicks on <i>pause</i> while the global preview is playing a transition, the method that is playing the component (as we have already seen, it can be either {{#crossLink \"VideoEditorPreview/playVideoEditorComponent:method\"}}{{/crossLink}} or {{#crossLink \"PlayersVideoEditor/initializeActionOfMediaTimeUpdaterInVideoEditor:method\"}}{{/crossLink}}) waits until the transition is over to stop the reproduction.\n<br/><br/>\nIn the class {{#crossLink \"VideoEditorPreviewAccessories\"}}{{/crossLink}} are stored the methods to handle the instruments available for the user to get to a specific position inside the timeline during preview mode. Such instruments (initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyPreview:method\"}}{{/crossLink}}) are:\n<ul>\n  <li>the <b>arrows</b> that allow the user to pass from a component to another</li>\n  <li>the <b>precision bar</b> that allows the user to select a specific point inside the selected component: notice that this bar is implemented with a <i>JQueryUi slider</i> which is destroyed and re-initialized at each component change (using the methods {{#crossLink \"VideoEditorPreviewAccessories/showVideoEditorPreviewComponentProgressBar:method\"}}{{/crossLink}} and {{#crossLink \"VideoEditorPreviewAccessories/hideVideoEditorPreviewComponentProgressBar:method\"}}{{/crossLink}}).</li>\n</ul>\nBoth precision instruments use the general method {{#crossLink \"VideoEditorPreviewAccessories/selectVideoComponentInPreview:method\"}}{{/crossLink}}, that allows to select a component at a specific time.\n<br/><br/>\nTo include the <b>background audio track</b> in the global preview, the system uses the method {{#crossLink \"VideoEditorPreviewAccessories/calculateVideoComponentStartSecondInVideoEditor:method\"}}{{/crossLink}}, which calculates <b>the total amount of seconds</b> until the selected point, including the time necessary for the transitions.\n<br/><br/>\nFinally, let's have a look at the functionalities of the JScrollPain: the method {{#crossLink \"VideoEditorScrollPain/followPreviewComponentsWithHorizontalScrollInVideoEditor:method\"}}{{/crossLink}} is called at any time the selected component changes inside the preview mode (that is, either while reproducing the global preview, or if the user changes component using the arrows); this method re-implements many functionalities that were badly implemented or absent in the original plugin, such as for instance the uniform speed to scroll different amounts of components. The method uses the class {{#crossLink \"MediaElementEditorHorizontalTimelines\"}}{{/crossLink}}\n<br/><br/>\nAs for the other Element Editors ({{#crossLinkModule \"image-editor\"}}{{/crossLinkModule}}, {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}) the core of the process of committing changes is handled in the module {{#crossLinkModule \"media-element-editor\"}}{{/crossLinkModule}} (more specificly in the class {{#crossLink \"MediaElementEditorForms\"}}{{/crossLink}}); the part of this functionality specific for the Video Editor is handled in {{#crossLink \"MediaElementEditorDocumentReady/mediaElementEditorDocumentReady:method\"}}{{/crossLink}}."
        },
        "virtual-classroom": {
            "name": "virtual-classroom",
            "submodules": {},
            "classes": {
                "VirtualClassroomDocumentReady": 1,
                "VirtualClassroomJavaScriptAnimations": 1,
                "VirtualClassroomMultipleLoading": 1,
                "VirtualClassroomSendLink": 1
            },
            "fors": {
                "VirtualClassroomDocumentReady": 1,
                "VirtualClassroomJavaScriptAnimations": 1,
                "VirtualClassroomMultipleLoading": 1,
                "VirtualClassroomSendLink": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 1,
            "description": "The <b>Virtual Classroom</b> is a container where the user can collect and visualize lessons. In the left part of the screen is located the list of lessons (with pagination), on the right there is the playlist.\n<br/><br/>\nOn each lesson, there are buttons to perform actions (see {{#crossLink \"VirtualClassroomDocumentReady/virtualClassroomDocumentReadyIconsAndButtons:method\"}}{{/crossLink}}). Furthermore, each lesson can be dragged using <i>JQueryUi draggable</i> and dropped inside the playlist (see {{#crossLink \"VirtualClassroomJavaScriptAnimations/initializeDraggableVirtualClassroomLesson:method\"}}{{/crossLink}}).\n<br/><br/>\nOne of the buttons in the header opens a popup for loading multiple lessons (initialized in {{#crossLink \"VirtualClassroomDocumentReady/virtualClassroomDocumentReadyMultipleLessonLoading:method\"}}{{/crossLink}}, see also {{#crossLink \"VirtualClassroomMultipleLoading\"}}{{/crossLink}}); another functionality is the popup to send the public link of a lesson (initialized in {{#crossLink \"VirtualClassroomDocumentReady/virtualClassroomDocumentReadySendLink:method\"}}{{/crossLink}}, see also {{#crossLink \"VirtualClassroomSendLink\"}}{{/crossLink}})."
        }
    },
    "classes": {
        "AdminAutocomplete": {
            "name": "AdminAutocomplete",
            "shortname": "AdminAutocomplete",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "admin",
            "namespace": ""
        },
        "AdminBrowserSupport": {
            "name": "AdminBrowserSupport",
            "shortname": "AdminBrowserSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "admin",
            "namespace": ""
        },
        "AdminCollapsed": {
            "name": "AdminCollapsed",
            "shortname": "AdminCollapsed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "admin",
            "namespace": ""
        },
        "AdminDocumentReady": {
            "name": "AdminDocumentReady",
            "shortname": "AdminDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "admin",
            "namespace": ""
        },
        "BrowserSupportMain": {
            "name": "BrowserSupportMain",
            "shortname": "BrowserSupportMain",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "browser-support",
            "namespace": ""
        },
        "AjaxLoaderBinder": {
            "name": "AjaxLoaderBinder",
            "shortname": "AjaxLoaderBinder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ajax-loader",
            "namespace": ""
        },
        "AjaxLoaderDocumentReady": {
            "name": "AjaxLoaderDocumentReady",
            "shortname": "AjaxLoaderDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ajax-loader",
            "namespace": ""
        },
        "AjaxLoaderVisibility": {
            "name": "AjaxLoaderVisibility",
            "shortname": "AjaxLoaderVisibility",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ajax-loader",
            "namespace": ""
        },
        "AudioEditorComponents": {
            "name": "AudioEditorComponents",
            "shortname": "AudioEditorComponents",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "audio-editor",
            "namespace": ""
        },
        "AudioEditorCutters": {
            "name": "AudioEditorCutters",
            "shortname": "AudioEditorCutters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "audio-editor",
            "namespace": ""
        },
        "AudioEditorDocumentReady": {
            "name": "AudioEditorDocumentReady",
            "shortname": "AudioEditorDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "audio-editor",
            "namespace": ""
        },
        "AudioEditorGalleries": {
            "name": "AudioEditorGalleries",
            "shortname": "AudioEditorGalleries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "audio-editor",
            "namespace": ""
        },
        "AudioEditorGeneral": {
            "name": "AudioEditorGeneral",
            "shortname": "AudioEditorGeneral",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "audio-editor",
            "namespace": ""
        },
        "AudioEditorGraphics": {
            "name": "AudioEditorGraphics",
            "shortname": "AudioEditorGraphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "audio-editor",
            "namespace": ""
        },
        "AudioEditorPreview": {
            "name": "AudioEditorPreview",
            "shortname": "AudioEditorPreview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "audio-editor",
            "namespace": ""
        },
        "AudioEditorScrollpain": {
            "name": "AudioEditorScrollpain",
            "shortname": "AudioEditorScrollpain",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "audio-editor",
            "namespace": ""
        },
        "ButtonsAccessories": {
            "name": "ButtonsAccessories",
            "shortname": "ButtonsAccessories",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "buttons",
            "namespace": ""
        },
        "ButtonsDocumentReady": {
            "name": "ButtonsDocumentReady",
            "shortname": "ButtonsDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "buttons",
            "namespace": ""
        },
        "ButtonsLesson": {
            "name": "ButtonsLesson",
            "shortname": "ButtonsLesson",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "buttons",
            "namespace": ""
        },
        "ButtonsMediaElement": {
            "name": "ButtonsMediaElement",
            "shortname": "ButtonsMediaElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "buttons",
            "namespace": ""
        },
        "DashboardAccessories": {
            "name": "DashboardAccessories",
            "shortname": "DashboardAccessories",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dashboard",
            "namespace": ""
        },
        "DashboardExpandedContents": {
            "name": "DashboardExpandedContents",
            "shortname": "DashboardExpandedContents",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dashboard",
            "namespace": ""
        },
        "DashboardLessonDescriptions": {
            "name": "DashboardLessonDescriptions",
            "shortname": "DashboardLessonDescriptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dashboard",
            "namespace": ""
        },
        "DashboardResizing": {
            "name": "DashboardResizing",
            "shortname": "DashboardResizing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dashboard",
            "namespace": ""
        },
        "DialogsAccessories": {
            "name": "DialogsAccessories",
            "shortname": "DialogsAccessories",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dialogs",
            "namespace": ""
        },
        "DialogsConfirmation": {
            "name": "DialogsConfirmation",
            "shortname": "DialogsConfirmation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dialogs",
            "namespace": ""
        },
        "DialogsGalleries": {
            "name": "DialogsGalleries",
            "shortname": "DialogsGalleries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dialogs",
            "namespace": ""
        },
        "DialogsTimed": {
            "name": "DialogsTimed",
            "shortname": "DialogsTimed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dialogs",
            "namespace": ""
        },
        "DialogsWithForm": {
            "name": "DialogsWithForm",
            "shortname": "DialogsWithForm",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dialogs",
            "namespace": ""
        },
        "GalleriesAccessories": {
            "name": "GalleriesAccessories",
            "shortname": "GalleriesAccessories",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "galleries",
            "namespace": ""
        },
        "GalleriesDocumentReady": {
            "name": "GalleriesDocumentReady",
            "shortname": "GalleriesDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "galleries",
            "namespace": ""
        },
        "GalleriesInitializers": {
            "name": "GalleriesInitializers",
            "shortname": "GalleriesInitializers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "galleries",
            "namespace": ""
        },
        "GeneralCentering": {
            "name": "GeneralCentering",
            "shortname": "GeneralCentering",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "general",
            "namespace": ""
        },
        "GeneralDocumentReady": {
            "name": "GeneralDocumentReady",
            "shortname": "GeneralDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "general",
            "namespace": ""
        },
        "GeneralMiscellanea": {
            "name": "GeneralMiscellanea",
            "shortname": "GeneralMiscellanea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "general",
            "namespace": ""
        },
        "GeneralUrls": {
            "name": "GeneralUrls",
            "shortname": "GeneralUrls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "general",
            "namespace": ""
        },
        "ImageEditorDocumentReady": {
            "name": "ImageEditorDocumentReady",
            "shortname": "ImageEditorDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "image-editor",
            "namespace": ""
        },
        "ImageEditorGraphics": {
            "name": "ImageEditorGraphics",
            "shortname": "ImageEditorGraphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "image-editor",
            "namespace": ""
        },
        "ImageEditorImageScale": {
            "name": "ImageEditorImageScale",
            "shortname": "ImageEditorImageScale",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "image-editor",
            "namespace": ""
        },
        "ImageEditorTexts": {
            "name": "ImageEditorTexts",
            "shortname": "ImageEditorTexts",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "image-editor",
            "namespace": ""
        },
        "JqueryBrowsersDetection": {
            "name": "JqueryBrowsersDetection",
            "shortname": "JqueryBrowsersDetection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jquery-browsers",
            "namespace": ""
        },
        "JqueryPatchesBrowsers": {
            "name": "JqueryPatchesBrowsers",
            "shortname": "JqueryPatchesBrowsers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jquery-patches",
            "namespace": ""
        },
        "LessonEditorCurrentSlide": {
            "name": "LessonEditorCurrentSlide",
            "shortname": "LessonEditorCurrentSlide",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-editor",
            "namespace": ""
        },
        "LessonEditorDocumentReady": {
            "name": "LessonEditorDocumentReady",
            "shortname": "LessonEditorDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-editor",
            "namespace": ""
        },
        "LessonEditorForms": {
            "name": "LessonEditorForms",
            "shortname": "LessonEditorForms",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-editor",
            "namespace": ""
        },
        "LessonEditorGalleries": {
            "name": "LessonEditorGalleries",
            "shortname": "LessonEditorGalleries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-editor",
            "namespace": ""
        },
        "LessonEditorImageResizing": {
            "name": "LessonEditorImageResizing",
            "shortname": "LessonEditorImageResizing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-editor",
            "namespace": ""
        },
        "LessonEditorJqueryAnimations": {
            "name": "LessonEditorJqueryAnimations",
            "shortname": "LessonEditorJqueryAnimations",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-editor",
            "namespace": ""
        },
        "LessonEditorSlideLoading": {
            "name": "LessonEditorSlideLoading",
            "shortname": "LessonEditorSlideLoading",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-editor",
            "namespace": ""
        },
        "LessonEditorSlidesNavigation": {
            "name": "LessonEditorSlidesNavigation",
            "shortname": "LessonEditorSlidesNavigation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-editor",
            "namespace": ""
        },
        "LessonEditorTinyMCE": {
            "name": "LessonEditorTinyMCE",
            "shortname": "LessonEditorTinyMCE",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-editor",
            "namespace": ""
        },
        "LessonViewerDocumentReady": {
            "name": "LessonViewerDocumentReady",
            "shortname": "LessonViewerDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-viewer",
            "namespace": ""
        },
        "LessonViewerGeneral": {
            "name": "LessonViewerGeneral",
            "shortname": "LessonViewerGeneral",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-viewer",
            "namespace": ""
        },
        "LessonViewerGraphics": {
            "name": "LessonViewerGraphics",
            "shortname": "LessonViewerGraphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-viewer",
            "namespace": ""
        },
        "LessonViewerPlaylist": {
            "name": "LessonViewerPlaylist",
            "shortname": "LessonViewerPlaylist",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-viewer",
            "namespace": ""
        },
        "LessonViewerSlidesNavigation": {
            "name": "LessonViewerSlidesNavigation",
            "shortname": "LessonViewerSlidesNavigation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lesson-viewer",
            "namespace": ""
        },
        "MediaElementEditorCache": {
            "name": "MediaElementEditorCache",
            "shortname": "MediaElementEditorCache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "media-element-editor",
            "namespace": ""
        },
        "MediaElementEditorConversion": {
            "name": "MediaElementEditorConversion",
            "shortname": "MediaElementEditorConversion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "media-element-editor",
            "namespace": ""
        },
        "MediaElementEditorDocumentReady": {
            "name": "MediaElementEditorDocumentReady",
            "shortname": "MediaElementEditorDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "media-element-editor",
            "namespace": ""
        },
        "MediaElementEditorForms": {
            "name": "MediaElementEditorForms",
            "shortname": "MediaElementEditorForms",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "media-element-editor",
            "namespace": ""
        },
        "MediaElementEditorHorizontalTimelines": {
            "name": "MediaElementEditorHorizontalTimelines",
            "shortname": "MediaElementEditorHorizontalTimelines",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "media-element-editor",
            "namespace": ""
        },
        "NotificationsAccessories": {
            "name": "NotificationsAccessories",
            "shortname": "NotificationsAccessories",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "notifications",
            "namespace": ""
        },
        "NotificationsDocumentReady": {
            "name": "NotificationsDocumentReady",
            "shortname": "NotificationsDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "notifications",
            "namespace": ""
        },
        "NotificationsGraphics": {
            "name": "NotificationsGraphics",
            "shortname": "NotificationsGraphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "notifications",
            "namespace": ""
        },
        "PlayersAudioEditor": {
            "name": "PlayersAudioEditor",
            "shortname": "PlayersAudioEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "players",
            "namespace": ""
        },
        "PlayersCommon": {
            "name": "PlayersCommon",
            "shortname": "PlayersCommon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "players",
            "namespace": ""
        },
        "PlayersDocumentReady": {
            "name": "PlayersDocumentReady",
            "shortname": "PlayersDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "players",
            "namespace": ""
        },
        "PlayersGeneral": {
            "name": "PlayersGeneral",
            "shortname": "PlayersGeneral",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "players",
            "namespace": ""
        },
        "PlayersVideoEditor": {
            "name": "PlayersVideoEditor",
            "shortname": "PlayersVideoEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "players",
            "namespace": ""
        },
        "ProfilePrelogin": {
            "name": "ProfilePrelogin",
            "shortname": "ProfilePrelogin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "profile",
            "namespace": ""
        },
        "ProfileUsers": {
            "name": "ProfileUsers",
            "shortname": "ProfileUsers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "profile",
            "namespace": ""
        },
        "SearchDocumentReady": {
            "name": "SearchDocumentReady",
            "shortname": "SearchDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "search",
            "namespace": ""
        },
        "TagsAccessories": {
            "name": "TagsAccessories",
            "shortname": "TagsAccessories",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tags",
            "namespace": ""
        },
        "TagsInitializers": {
            "name": "TagsInitializers",
            "shortname": "TagsInitializers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tags",
            "namespace": ""
        },
        "UploaderDocumentReady": {
            "name": "UploaderDocumentReady",
            "shortname": "UploaderDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "uploader",
            "namespace": ""
        },
        "UploaderGlobal": {
            "name": "UploaderGlobal",
            "shortname": "UploaderGlobal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "uploader",
            "namespace": ""
        },
        "UploaderLoadingBar": {
            "name": "UploaderLoadingBar",
            "shortname": "UploaderLoadingBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "uploader",
            "namespace": ""
        },
        "VideoEditorAddComponents": {
            "name": "VideoEditorAddComponents",
            "shortname": "VideoEditorAddComponents",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VideoEditorComponents": {
            "name": "VideoEditorComponents",
            "shortname": "VideoEditorComponents",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VideoEditorCutters": {
            "name": "VideoEditorCutters",
            "shortname": "VideoEditorCutters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VideoEditorDocumentReady": {
            "name": "VideoEditorDocumentReady",
            "shortname": "VideoEditorDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VideoEditorGalleries": {
            "name": "VideoEditorGalleries",
            "shortname": "VideoEditorGalleries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VideoEditorGeneral": {
            "name": "VideoEditorGeneral",
            "shortname": "VideoEditorGeneral",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VideoEditorPreview": {
            "name": "VideoEditorPreview",
            "shortname": "VideoEditorPreview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VideoEditorPreviewAccessories": {
            "name": "VideoEditorPreviewAccessories",
            "shortname": "VideoEditorPreviewAccessories",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VideoEditorReplaceComponents": {
            "name": "VideoEditorReplaceComponents",
            "shortname": "VideoEditorReplaceComponents",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VideoEditorScrollPain": {
            "name": "VideoEditorScrollPain",
            "shortname": "VideoEditorScrollPain",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VideoEditorTextComponentEditor": {
            "name": "VideoEditorTextComponentEditor",
            "shortname": "VideoEditorTextComponentEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "video-editor",
            "namespace": ""
        },
        "VirtualClassroomDocumentReady": {
            "name": "VirtualClassroomDocumentReady",
            "shortname": "VirtualClassroomDocumentReady",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "virtual-classroom",
            "namespace": ""
        },
        "VirtualClassroomJavaScriptAnimations": {
            "name": "VirtualClassroomJavaScriptAnimations",
            "shortname": "VirtualClassroomJavaScriptAnimations",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "virtual-classroom",
            "namespace": ""
        },
        "VirtualClassroomMultipleLoading": {
            "name": "VirtualClassroomMultipleLoading",
            "shortname": "VirtualClassroomMultipleLoading",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "virtual-classroom",
            "namespace": ""
        },
        "VirtualClassroomSendLink": {
            "name": "VirtualClassroomSendLink",
            "shortname": "VirtualClassroomSendLink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "virtual-classroom",
            "namespace": ""
        }
    },
    "classitems": [
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 10,
            "description": "Initializer for jQueryUI autocomplete on users serch into Admin Notifications.",
            "itemtype": "method",
            "name": "initNotificationsAutocomplete",
            "class": "AdminAutocomplete",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 49,
            "description": "Browser support checking, supported browsers version. It is empty. The not supported browsers version is implemented in {{#crossLink \"BrowserSupportMain/browserSupportMain:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "adminBrowserSupport",
            "class": "AdminBrowserSupport",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 61,
            "description": "Open a collapsed table row with extra content, tipically clicking on previous collapsable table row.",
            "itemtype": "method",
            "name": "openAndLoadNextTr",
            "params": [
                {
                    "name": "prevTr",
                    "description": "the previous element in the table",
                    "type": "Object"
                }
            ],
            "class": "AdminCollapsed",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 84,
            "description": "Initializes the browser classes in the tag html. Same functionality as {{#crossLink \"GeneralDocumentReady/browsersDocumentReady:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "adminBrowsersDocumentReady",
            "class": "AdminDocumentReady",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 101,
            "description": "Initializes the effects of collapse and change date.",
            "itemtype": "method",
            "name": "adminEffectsDocumentReady",
            "class": "AdminDocumentReady",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 160,
            "description": "Initializes the locations filling. See similar {{#crossLink \"GeneralDocumentReady/locationsDocumentReady:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "adminLocationsDocumentReady",
            "class": "AdminDocumentReady",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 274,
            "description": "Initializes effects for MediaElement.",
            "itemtype": "method",
            "name": "adminMediaElementsDocumentReady",
            "class": "AdminDocumentReady",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 361,
            "description": "Initializes actions for less important tables, such as Tag, Subject, SchoolLevel",
            "itemtype": "method",
            "name": "adminMiscellaneaDocumentReady",
            "class": "AdminDocumentReady",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 401,
            "description": "Initializes effects for the administration search engine.",
            "itemtype": "method",
            "name": "adminSearchDocumentReady",
            "class": "AdminDocumentReady",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 462,
            "description": "Initializes effects for sorting in administration search engine.",
            "itemtype": "method",
            "name": "adminSortingDocumentReady",
            "class": "AdminDocumentReady",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/admin/functions.js",
            "line": 506,
            "description": "Initializes effects for User.",
            "itemtype": "method",
            "name": "adminUsersDocumentReady",
            "class": "AdminDocumentReady",
            "module": "admin"
        },
        {
            "file": "app/assets/javascripts/browser_not_supported/application.js",
            "line": 10,
            "description": "Browser support checking, not supported browsers version. It substitutes the page body with the not supported browser HTML. Implements two empty functions, one in {{#crossLink \"AdminBrowserSupport/adminBrowserSupport:method\"}}{{/crossLink}}, and one in {{#crossLink \"GeneralMiscellanea/browserSupport:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "browserSupportMain",
            "class": "BrowserSupportMain",
            "module": "browser-support"
        },
        {
            "file": "app/assets/javascripts/ajax_loader.js",
            "line": 10,
            "description": "Bind Loader, show loader on ajaxStart and hide loader on ajaxStop.",
            "itemtype": "method",
            "name": "bindLoader",
            "class": "AjaxLoaderBinder",
            "module": "ajax-loader"
        },
        {
            "file": "app/assets/javascripts/ajax_loader.js",
            "line": 19,
            "description": "Unbind Loader, unbind loader for ajaxStart and ajaxStop. Used occasionally, when the loader is not necessary (for instance in {{#crossLinkModule \"lesson-editor\"}}{{/crossLinkModule}})",
            "itemtype": "method",
            "name": "unbindLoader",
            "class": "AjaxLoaderBinder",
            "module": "ajax-loader"
        },
        {
            "file": "app/assets/javascripts/ajax_loader.js",
            "line": 32,
            "description": "Initializes the ajax loader. Used also in the initialization of the module {{#crossLinkModule \"admin\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "ajaxLoaderDocumentReady",
            "class": "AjaxLoaderDocumentReady",
            "module": "ajax-loader"
        },
        {
            "file": "app/assets/javascripts/ajax_loader.js",
            "line": 66,
            "description": "Hides the loader without binding or unbinding it.",
            "itemtype": "method",
            "name": "hideLoader",
            "class": "AjaxLoaderVisibility",
            "module": "ajax-loader"
        },
        {
            "file": "app/assets/javascripts/ajax_loader.js",
            "line": 75,
            "description": "Shows the loader without binding or unbinding it (it has a timeout of 5000).",
            "itemtype": "method",
            "name": "showLoader",
            "class": "AjaxLoaderVisibility",
            "module": "ajax-loader"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 18,
            "description": "This function adds a new audio component to the timeline: it extracts the empty audio component hidden in the template, replaces in it the values of the new audio component, and appends it right after the selected component. If there are no selected components, the new one is appended at the end of the timeline.",
            "itemtype": "method",
            "name": "addComponentInAudioEditor",
            "params": [
                {
                    "name": "audio_id",
                    "description": "the ID of the audio in the database",
                    "type": "Number"
                },
                {
                    "name": "ogg",
                    "description": "the path of the attached audio in format ogg",
                    "type": "String"
                },
                {
                    "name": "m4a",
                    "description": "the path of the attached audio in format mp4",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "the integer duration of the audio",
                    "type": "Number"
                },
                {
                    "name": "title",
                    "description": "the title of the audio extracted from the database",
                    "type": "String"
                }
            ],
            "class": "AudioEditorComponents",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 73,
            "description": "This function changes the duration of a component, and updates the global durations.",
            "itemtype": "method",
            "name": "changeDurationAudioEditorComponent",
            "params": [
                {
                    "name": "component",
                    "description": "the component",
                    "type": "Object"
                },
                {
                    "name": "new_duration",
                    "description": "the new duration",
                    "type": "Number"
                }
            ],
            "class": "AudioEditorComponents",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 90,
            "description": "Function that deselects all the audio components.",
            "itemtype": "method",
            "name": "deselectAllAudioEditorComponents",
            "class": "AudioEditorComponents",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 113,
            "description": "Function that creates a single input field to be inserted in the empty audio component during the process of construction of a new one (similar to {{#crossLink \"VideoEditorComponents/fillVideoEditorSingleParameter:method\"}}{{/crossLink}}; used in {{#crossLink \"AudioEditorComponents/addComponentInAudioEditor:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "fillAudioEditorSingleParameter",
            "params": [
                {
                    "name": "input",
                    "description": "the specific input to be filled (for example, <i>audio_id</i>, <i>from</i>, or <i>to</i>)",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "the identifier of the component",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "the HTML value to be assigned to the input",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the resulting input written in HTML",
                "type": "String"
            },
            "class": "AudioEditorComponents",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 126,
            "description": "An HTML5 audio is loaded only when necessary: this function extracts from the data the sources of the audio, and loads it (unless the component had already been loaded previously)",
            "itemtype": "method",
            "name": "loadAudioComponentIfNotLoadedYet",
            "params": [
                {
                    "name": "component",
                    "description": "the component to load",
                    "type": "Object"
                }
            ],
            "class": "AudioEditorComponents",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 143,
            "description": "Reloads the correct positions of the components after sorting them.",
            "itemtype": "method",
            "name": "reloadAudioEditorComponentPositions",
            "class": "AudioEditorComponents",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 157,
            "description": "Removes a component from the timeline.",
            "itemtype": "method",
            "name": "removeAudioEditorComponent",
            "params": [
                {
                    "name": "component",
                    "description": "the component to be removed",
                    "type": "Object"
                }
            ],
            "class": "AudioEditorComponents",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 178,
            "description": "This function removes the margin bottom from the last component in the timeline: this is necessary to handle with precision the JScrollPain (see {{#crossLink \"AudioEditorScrollpain\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "resizeLastComponentInAudioEditor",
            "class": "AudioEditorComponents",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 188,
            "description": "Function that selects an audio component.",
            "itemtype": "method",
            "name": "selectAudioEditorComponent",
            "params": [
                {
                    "name": "component",
                    "description": "the component to be selected",
                    "type": "Object"
                }
            ],
            "class": "AudioEditorComponents",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 213,
            "description": "Changes the value of the left margin of an audio component, and updates its duration using {{#crossLink \"AudioEditorComponents/changeDurationAudioEditorComponent:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "cutAudioComponentLeftSide",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the component",
                    "type": "Number"
                },
                {
                    "name": "pos",
                    "description": "the new position of the left margin of the component (input <i>from</i>)",
                    "type": "Number"
                }
            ],
            "class": "AudioEditorCutters",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 229,
            "description": "Changes the value of the right margin of an audio component, and updates its duration using {{#crossLink \"AudioEditorComponents/changeDurationAudioEditorComponent:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "cutAudioComponentRightSide",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the component",
                    "type": "Number"
                },
                {
                    "name": "pos",
                    "description": "the new position of the right margin of the component (input <i>to</i>)",
                    "type": "Number"
                }
            ],
            "class": "AudioEditorCutters",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 245,
            "description": "Deselects all the cursors in a component.",
            "itemtype": "method",
            "name": "deselectAllAudioEditorCursors",
            "params": [
                {
                    "name": "id",
                    "description": "the unique identifier of the component",
                    "type": "Number"
                }
            ],
            "class": "AudioEditorCutters",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 256,
            "description": "Selects the central cursor of an audio component.",
            "itemtype": "method",
            "name": "selectAudioEditorCursor",
            "params": [
                {
                    "name": "id",
                    "description": "the unique identifier of the component",
                    "type": "Number"
                }
            ],
            "class": "AudioEditorCutters",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 268,
            "description": "Selects the left handle of an audio component.",
            "itemtype": "method",
            "name": "selectAudioEditorLeftHandle",
            "params": [
                {
                    "name": "id",
                    "description": "the unique identifier of the component",
                    "type": "Number"
                }
            ],
            "class": "AudioEditorCutters",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 280,
            "description": "Selects the right handle of an audio component.",
            "itemtype": "method",
            "name": "selectAudioEditorRightHandle",
            "params": [
                {
                    "name": "id",
                    "description": "the unique identifier of the component",
                    "type": "Number"
                }
            ],
            "class": "AudioEditorCutters",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 296,
            "description": "Initializes the whole Audio Editor, calling all the subinitializers",
            "itemtype": "method",
            "name": "audioEditorDocumentReady",
            "class": "AudioEditorDocumentReady",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 307,
            "description": "Initializer for the precision arrows in the cutters. For the other functionalities related to cutters, see {{#crossLink \"PlayersAudioEditor\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "audioEditorDocumentReadyCutters",
            "class": "AudioEditorDocumentReady",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 370,
            "description": "Initializes the JQueryUi animations (sorting components), and all the effects of selection of components (see {{#crossLink \"AudioEditorComponents/selectAudioEditorComponent:method\"}}{{/crossLink}} and similar methods).",
            "itemtype": "method",
            "name": "audioEditorDocumentReadyGeneral",
            "class": "AudioEditorDocumentReady",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 461,
            "description": "Initializes the functionalities of the preview (see also {{#crossLink \"AudioEditorPreview\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "audioEditorDocumentReadyPreview",
            "class": "AudioEditorDocumentReady",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 495,
            "description": "Sets the correct position of the gallery: used while showing and closing the audio gallery (see respectively {{#crossLink \"AudioEditorGalleries/showGalleryInAudioEditor:method\"}}{{/crossLink}} and {{#crossLink \"AudioEditorGalleries/closeGalleryInAudioEditor:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "calculateNewPositionGalleriesInAudioEditor",
            "class": "AudioEditorGalleries",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 504,
            "description": "Closes the gallery.",
            "itemtype": "method",
            "name": "closeGalleryInAudioEditor",
            "class": "AudioEditorGalleries",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 516,
            "description": "Shows the gallery.",
            "itemtype": "method",
            "name": "showGalleryInAudioEditor",
            "class": "AudioEditorGalleries",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 532,
            "description": "Extracts the unique identifier of a component using its HTML id.",
            "itemtype": "method",
            "name": "getAudioComponentIdentifier",
            "params": [
                {
                    "name": "component",
                    "description": "the component from which we want to extract the identifier",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the identifier",
                "type": "Number"
            },
            "class": "AudioEditorGeneral",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 548,
            "description": "Disables the buttons <i>commit</i> and <i>prewiev</i>.",
            "itemtype": "method",
            "name": "disableCommitAndPreviewInAudioEditor",
            "class": "AudioEditorGraphics",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 560,
            "description": "Enables the buttons <i>commit</i> and <i>preview</i>.",
            "itemtype": "method",
            "name": "enableCommitAndPreviewInAudioEditor",
            "class": "AudioEditorGraphics",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 572,
            "description": "Function that sets the correct value to all the z-indexes: there are in total three hidden layers for each component, one global, plus two sliders in each cutter, and each of them needs its specific z-index. Used at any time the components are hidden and need to be shown (for instance {{#crossLink \"AudioEditorGalleries/showGalleryInAudioEditor:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "setBackAllZIndexesInAudioEditor",
            "class": "AudioEditorGraphics",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 586,
            "description": "Function that sets to zero the value to all the z-indexes: there are in total three hidden layers for each component, one global, plus two sliders in each cutter, and each of them needs its specific z-index. Used at any time the components are shown and need to be hidden (for instance {{#crossLink \"AudioEditorGalleries/closeGalleryInAudioEditor:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "setToZeroAllZIndexesInAudioEditor",
            "class": "AudioEditorGraphics",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 604,
            "description": "Deselects all the components in preview mode (it corresponds to {{#crossLink \"AudioEditorComponents/deselectAllAudioEditorComponents:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "deselectAllAudioEditorComponentsInPreviewMode",
            "class": "AudioEditorPreview",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 620,
            "description": "Function that sets all the graphical details that characterize the preview mode. It automatically calls the function {{#crossLink \"AudioEditorPreview/startAudioEditorPreview:method\"}}{{/crossLink}}, passing it as parameter the selected component, or the first one if there is no selected component.",
            "itemtype": "method",
            "name": "enterAudioEditorPreviewMode",
            "class": "AudioEditorPreview",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 661,
            "description": "Gets the current time in the global preview, using the information relative to the selected component and the position of the cursor inside its cutter.",
            "itemtype": "method",
            "name": "getAudioEditorGlobalPreviewTime",
            "class": "AudioEditorPreview",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 685,
            "description": "Increases of one second the global preview timer.",
            "itemtype": "method",
            "name": "increaseAudioEditorPreviewTimer",
            "class": "AudioEditorPreview",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 697,
            "description": "Function that sets back to the regular value all the graphical details that characterize the preview mode.",
            "itemtype": "method",
            "name": "leaveAudioEditorPreviewMode",
            "params": [
                {
                    "name": "forced_component",
                    "description": "the component that must be selected after leaving the preview mode: if not specified, the function selects the first component.",
                    "type": "Object"
                }
            ],
            "class": "AudioEditorPreview",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 730,
            "description": "Selects a component in preview mode (it corresponds to {{#crossLink \"AudioEditorComponents/selectAudioEditorComponent:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "selectAudioEditorComponentInPreviewMode",
            "params": [
                {
                    "name": "component",
                    "description": "the component to be selected",
                    "type": "Object"
                }
            ],
            "class": "AudioEditorPreview",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 745,
            "description": "Starts the preview from a given component.",
            "itemtype": "method",
            "name": "startAudioEditorPreview",
            "params": [
                {
                    "name": "component",
                    "description": "the component from which the preview starts.",
                    "type": "Object"
                }
            ],
            "class": "AudioEditorPreview",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 763,
            "description": "Switches all the components in preview mode.",
            "itemtype": "method",
            "name": "switchAudioComponentsToPreviewMode",
            "class": "AudioEditorPreview",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 777,
            "description": "Switches all the components back to regular mode.",
            "itemtype": "method",
            "name": "switchBackAudioComponentsFromPreviewMode",
            "class": "AudioEditorPreview",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 795,
            "description": "Function used to keep updated the position of the scroll with the current component played in the global preview. It checks a condition and then uses {{#crossLink \"AudioEditorScrollpain/scrollToFirstSelectedAudioEditorComponent:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "followPreviewComponentsWithVerticalScrollInAudioEditor",
            "class": "AudioEditorScrollpain",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/audio_editor.js",
            "line": 806,
            "description": "Hand made function that simply scrolls to a component and executes a callback. This function needed to be written since the original JScrollPain doesn't provide it (!).",
            "itemtype": "method",
            "name": "scrollToFirstSelectedAudioEditorComponent",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to be executed after scrolling",
                    "type": "Function"
                }
            ],
            "class": "AudioEditorScrollpain",
            "module": "audio-editor"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 10,
            "description": "Add the url parameter 'delete_item' to an url (this parameter is used to delete an item while reloading the page).",
            "itemtype": "method",
            "name": "addDeleteItemToCurrentUrl",
            "params": [
                {
                    "name": "current_url",
                    "description": "the initial url",
                    "type": "String"
                },
                {
                    "name": "delete_item",
                    "description": "the value to be assigned to the url parameter 'delete_item'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "updated url",
                "type": "String"
            },
            "class": "ButtonsAccessories",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 33,
            "description": "Initializes all the buttons available for lessons.",
            "itemtype": "method",
            "name": "lessonButtonsDocumentReady",
            "class": "ButtonsDocumentReady",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 158,
            "description": "Initializes all the buttons for media elements.",
            "itemtype": "method",
            "name": "mediaElementButtonsDocumentReady",
            "class": "ButtonsDocumentReady",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 236,
            "description": "Calls the url to add the link of a lesson. It can either reload the item or remove it from the page.",
            "itemtype": "method",
            "name": "addLesson",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the lesson)",
                    "type": "String"
                },
                {
                    "name": "current_url",
                    "description": "url where the lesson is added from",
                    "type": "String"
                },
                {
                    "name": "reload",
                    "description": "true if the item must be reloaded, false if it must be removed",
                    "type": "Boolean"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 272,
            "description": "Calls the url to add a lesson to my Virtual Classroom. It reloads the item.",
            "itemtype": "method",
            "name": "addLessonToVirtualClassroom",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the lesson)",
                    "type": "String"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 286,
            "description": "Calls the url to copy a lesson.",
            "itemtype": "method",
            "name": "copyLesson",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the lesson)",
                    "type": "String"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 300,
            "description": "Calls the url to destroy a lesson. It removes the lesson from the page.",
            "itemtype": "method",
            "name": "destroyLesson",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the lesson)",
                    "type": "String"
                },
                {
                    "name": "current_url",
                    "description": "url where the lesson is added from",
                    "type": "String"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 334,
            "description": "Calls the url to remove the 'I like it' from a lesson. It reloads the item.",
            "itemtype": "method",
            "name": "dislikeLesson",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the lesson)",
                    "type": "String"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 348,
            "description": "Calls the url to add a 'I like it' to a lesson. It reloads the item.",
            "itemtype": "method",
            "name": "likeLesson",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the lesson)",
                    "type": "String"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 362,
            "description": "Calls the url that opens the lesson viewer for this lesson.",
            "itemtype": "method",
            "name": "previewLesson",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "redirect_to",
                    "description": "url to be redirected when leaving the Lesson Viewer",
                    "type": "String"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 384,
            "description": "Calls the url to publish a lesson. It reloads the item.",
            "itemtype": "method",
            "name": "publishLesson",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the lesson)",
                    "type": "String"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 405,
            "description": "Calls the url to remove a link of a lesson. It can either reload the item or remove it from the page.",
            "itemtype": "method",
            "name": "removeLesson",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the lesson)",
                    "type": "String"
                },
                {
                    "name": "current_url",
                    "description": "url where the lesson is added from",
                    "type": "String"
                },
                {
                    "name": "reload",
                    "description": "true if the item must be reloaded, false if it must be removed",
                    "type": "Boolean"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 441,
            "description": "Calls the url to remove a lesson from my Virtual Classroom. It reloads the item.",
            "itemtype": "method",
            "name": "removeLessonFromVirtualClassroom",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the lesson)",
                    "type": "String"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 455,
            "description": "Calls the url to unpublish a lesson. It reloads the item.",
            "itemtype": "method",
            "name": "unpublishLesson",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id of the lesson in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the lesson)",
                    "type": "String"
                }
            ],
            "class": "ButtonsLesson",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 480,
            "description": "Calls the url to add the link of a media element. It can either reload the item or remove it from the page.",
            "itemtype": "method",
            "name": "addMediaElement",
            "params": [
                {
                    "name": "media_element_id",
                    "description": "id of the element in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the element)",
                    "type": "String"
                },
                {
                    "name": "current_url",
                    "description": "url where the element is added from",
                    "type": "String"
                },
                {
                    "name": "reload",
                    "description": "true if the item must be reloaded, false if it must be removed",
                    "type": "Boolean"
                }
            ],
            "class": "ButtonsMediaElement",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 516,
            "description": "Calls the url to destroy a media element. It removes the element from the page.",
            "itemtype": "method",
            "name": "destroyMediaElement",
            "params": [
                {
                    "name": "media_element_id",
                    "description": "id of the element in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the element)",
                    "type": "String"
                },
                {
                    "name": "current_url",
                    "description": "url where the element is added from",
                    "type": "String"
                },
                {
                    "name": "used_in_private_lessons",
                    "description": "if true, the application writes in the confirmation popup that the user is going to remove the same element from his private lessons",
                    "type": "Boolean"
                }
            ],
            "class": "ButtonsMediaElement",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/buttons.js",
            "line": 558,
            "description": "Calls the url to remove a link of an element. It can either reload the item or remove it from the page.",
            "itemtype": "method",
            "name": "removeMediaElement",
            "params": [
                {
                    "name": "media_element_id",
                    "description": "id of the element in the database",
                    "type": "Number"
                },
                {
                    "name": "destination",
                    "description": "destination (used to pick the HTML id of the element)",
                    "type": "String"
                },
                {
                    "name": "current_url",
                    "description": "url where the element is added from",
                    "type": "String"
                },
                {
                    "name": "reload",
                    "description": "true if the item must be reloaded, false if it must be removed",
                    "type": "Boolean"
                }
            ],
            "class": "ButtonsMediaElement",
            "module": "buttons"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 14,
            "description": "Initializes the dashboard, and reactions to window resizing. To handle hover sensitive lessons and show a div containing the description, the method calls functions in {{#crossLink \"DashboardLessonDescriptions\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "dashboardDocumentReady",
            "class": "DashboardAccessories",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 67,
            "description": "Empties the pages, before loading new contents. This is used in the action index.js.erb.",
            "itemtype": "method",
            "name": "emptyAllPagesInDashboard",
            "params": [
                {
                    "name": "selector",
                    "description": "either 'lessons' or 'media_elements'",
                    "type": "String"
                }
            ],
            "class": "DashboardAccessories",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 83,
            "description": "Resets all the pages to invisible, and sets as visible the one selected by the user.",
            "itemtype": "method",
            "name": "resetVisibilityOfAllPagesInDashboard",
            "params": [
                {
                    "name": "selector",
                    "description": "either 'lessons' or 'media_elements'",
                    "type": "String"
                },
                {
                    "name": "visible",
                    "description": "the number of the page to be shown",
                    "type": "Number"
                }
            ],
            "class": "DashboardAccessories",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 100,
            "description": "Compresses the section 'lessons', using animate to have a graphical effect.",
            "itemtype": "method",
            "name": "compressLessonsInDashboard",
            "class": "DashboardExpandedContents",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 124,
            "description": "Compresses the section 'media elements', using animate to have a graphical effect.",
            "itemtype": "method",
            "name": "compressMediaElementsInDashboard",
            "class": "DashboardExpandedContents",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 148,
            "description": "Expands the section 'lessons', using animate to have a graphical effect.",
            "itemtype": "method",
            "name": "expandLessonsInDashboard",
            "class": "DashboardExpandedContents",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 168,
            "description": "Expands the section 'media elements', using animate to have a graphical effect. The variable 'scroll_height' is calculated as follows: if the section lessons has been expanded (see {{#crossLink \"DashboardExpandedContents/expandLessonsInDashboard:method\"}}{{/crossLink}}) the overall height is 72px (header) + 61px (header menu) + 50px (margin of global content) + 70px (header of lessons) + 660px (height of lessons) + 40px (pagination of lessons) + 50px (margin of the section elements) + 70px (header of elements) + 660px (height of section elements, once it is expanded) + 40px (pagination of elements) + 50px (padding between main content and footer) = 1823px; if lessons are not expanded, the height of lessons is only 315, and it's not calculated the height of lessons pagination, obtaining a total of 1438px. The scroll is launched with a delay of 150 ms, to avoid overlapping with the expansion effect.",
            "itemtype": "method",
            "name": "expandMediaElementsInDashboard",
            "class": "DashboardExpandedContents",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 192,
            "description": "This function is used to initialize the paginator in the dashboard. It replaces the paginator, copying and pasting it from a hidden div. The method is called only for an expanded section, otherwise there is no pagination.",
            "itemtype": "method",
            "name": "initializeDashboardPagination",
            "params": [
                {
                    "name": "selector",
                    "description": "either 'lessons' or 'media_elements'",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": "the current page",
                    "type": "Number"
                },
                {
                    "name": "pages_amount",
                    "description": "the total amount of pages",
                    "type": "Number"
                }
            ],
            "class": "DashboardExpandedContents",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 241,
            "description": "This method calls {{#crossLink \"DashboardLessonDescriptions/openDescriptionDashboardRecursionLayer:method\"}}{{/crossLink}} after a certain delay of ms (this procedure is similar to the one defined in {{#crossLink \"VideoEditorComponents/startVideoEditorPreviewClipWithDelay:method\"}}{{/crossLink}}, in the module {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "openDescriptionDashboardLayer",
            "params": [
                {
                    "name": "item",
                    "description": "the div that expands, containing a hidden description",
                    "type": "Object"
                }
            ],
            "class": "DashboardLessonDescriptions",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 257,
            "description": "This method is used to open the special div containing description, author and subject of a lesson. It doesn't use animate so it's possible to reverse the expansion just firing mouseleave on the lesson.",
            "itemtype": "method",
            "name": "openDescriptionDashboardRecursionLayer",
            "params": [
                {
                    "name": "item",
                    "description": "the div that expands, containing a hidden description",
                    "type": "Object"
                },
                {
                    "name": "t",
                    "description": "the current time in the animation",
                    "type": "Number"
                },
                {
                    "name": "h_i",
                    "description": "the current height",
                    "type": "Number"
                },
                {
                    "name": "h_f",
                    "description": "the final height of the div",
                    "type": "Number"
                },
                {
                    "name": "tot_time",
                    "description": "the total time available to achieve the animation",
                    "type": "Number"
                }
            ],
            "class": "DashboardLessonDescriptions",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 289,
            "description": "This method makes decisions about how to react to a resize event. First it centers the lessons, calculating the maximum number that fits the available horizontal space, and the margin-left to apply. Then, it uses such a margin left to calculate the available space for media elements (these must be aligned with the lessons on both left and right sides). After the correct number of lessons and media elements has been calculated, the method decides if it's necessary to call the server and fetch new items: if this is not necessary, it's called {{#crossLink \"DashboardResizing/resizeLessonsAndMediaElementsInDashboard:method}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "dashboardResizeController",
            "class": "DashboardResizing",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dashboard.js",
            "line": 331,
            "description": "This method resizes lessons and media elements without calling the server to add new ones.",
            "itemtype": "method",
            "name": "resizeLessonsAndMediaElementsInDashboard",
            "params": [
                {
                    "name": "lessons",
                    "description": "how many lessons fit horizontally the screen",
                    "type": "Number"
                },
                {
                    "name": "media_elements",
                    "description": "how many media elements fit horizontally the screen",
                    "type": "Number"
                },
                {
                    "name": "with_vertical_margin",
                    "description": "if true, sets temporarily the vertical margin to adapt to the new pagination: this is used in case the server is too slow, to visualize in a good way the items while waiting for an answer",
                    "type": "Boolean"
                }
            ],
            "class": "DashboardResizing",
            "module": "dashboard"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 10,
            "description": "Close a dialog with given HTML id.",
            "itemtype": "method",
            "name": "closePopUp",
            "params": [
                {
                    "name": "id",
                    "description": "HTML id of the dialog",
                    "type": "String"
                }
            ],
            "class": "DialogsAccessories",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 20,
            "description": "Adds the class <i>close on click out</i> to the widget overlay: this function is called on the callbacks of dialog functions, to allow the user to close the dialog directly clicking out.",
            "itemtype": "method",
            "name": "customOverlayClose",
            "class": "DialogsAccessories",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 30,
            "description": "Close and successively remove HTML for all media element poopups. It calls {{#crossLink \"DialogsAccessories/removeCompletelyDocumentPopup:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "removeCompletelyAllDocumentPopups",
            "class": "DialogsAccessories",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 41,
            "description": "Close and successively remove HTML for all media element poopups. It calls {{#crossLink \"DialogsAccessories/removeCompletelyMediaElementPopup:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "removeCompletelyAllMediaElementPopups",
            "class": "DialogsAccessories",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 52,
            "description": "Close and successively remove HTML for a given document popup.",
            "itemtype": "method",
            "name": "removeCompletelyDocumentPopup",
            "params": [
                {
                    "name": "document_id",
                    "description": "id of the document in the database, used to extract the HTML id of the dialog",
                    "type": "Number"
                }
            ],
            "class": "DialogsAccessories",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 69,
            "description": "Close and successively remove HTML for a given media element popup.",
            "itemtype": "method",
            "name": "removeCompletelyMediaElementPopup",
            "params": [
                {
                    "name": "media_element_id",
                    "description": "id of the element in the database, used to extract the HTML id of the dialog",
                    "type": "Number"
                }
            ],
            "class": "DialogsAccessories",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 86,
            "description": "Opposite of {{#crossLink \"DialogsAccessories/customOverlayClose:method\"}}{{/crossLink}}. Remember that the widget-overlay object is unique for every dialog built with JQueryUi, thus it's compulsory to remove the class <i>close on click out</i> before opening a new dialog.",
            "itemtype": "method",
            "name": "removeCustomOverlayClose",
            "class": "DialogsAccessories",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 99,
            "description": "Generic confirmation dialog.",
            "itemtype": "method",
            "name": "showConfirmPopUp",
            "params": [
                {
                    "name": "title",
                    "description": "title",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "text",
                    "type": "String"
                },
                {
                    "name": "msg_ok",
                    "description": "caption for the button 'ok' (on the left side of the dialog)",
                    "type": "String"
                },
                {
                    "name": "msg_no",
                    "description": "caption for the button 'cancel' (on the right side of the dialog)",
                    "type": "String"
                },
                {
                    "name": "callback_ok",
                    "description": "callback associated to the button 'ok'",
                    "type": "Function"
                },
                {
                    "name": "callback_no",
                    "description": "callback associated to the button 'cancel'",
                    "type": "Function"
                }
            ],
            "class": "DialogsConfirmation",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 135,
            "description": "Dialog used in {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}} and in {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}, that asks the user if he wants to restore the cache or not. Specificly, it's used in the generic function {{#crossLink \"MediaElementEditorCache/startCacheLoop:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "showRestoreCacheMediaElementEditorPopUp",
            "params": [
                {
                    "name": "callback_ok",
                    "description": "callback function to restore the cache",
                    "type": "Function"
                },
                {
                    "name": "callback_no",
                    "description": "callback function that removes the cache and opens the requested page",
                    "type": "Function"
                }
            ],
            "class": "DialogsConfirmation",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 186,
            "description": "Dialog for the image gallery.",
            "itemtype": "method",
            "name": "showImageInGalleryPopUp",
            "params": [
                {
                    "name": "image_id",
                    "description": "id in the database of the image, which is used to extract the HTML id of the dialog",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "callback function (it depends on the gallery, see module {{#crossLinkModule \"galleries\"}}{{/crossLinkModule}}",
                    "type": "Object"
                }
            ],
            "class": "DialogsGalleries",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 226,
            "description": "Dialog for the video gallery (notice that the video is initialized in the moment the dialog gets opened.",
            "itemtype": "method",
            "name": "showVideoInGalleryPopUp",
            "params": [
                {
                    "name": "video_id",
                    "description": "id in the database of the video, which is used to extract the HTML id of the dialog",
                    "type": "Number"
                }
            ],
            "class": "DialogsGalleries",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 277,
            "description": "Timed dialog for errors. It uses the general {{#crossLink \"DialogsTimed/showTimedPopUp:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "showErrorPopUp",
            "params": [
                {
                    "name": "content",
                    "description": "the text content of the dialog",
                    "type": "String"
                }
            ],
            "class": "DialogsTimed",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 288,
            "description": "Timed dialog for success. It uses the general {{#crossLink \"DialogsTimed/showTimedPopUp:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "showOkPopUp",
            "params": [
                {
                    "name": "content",
                    "description": "the text content of the dialog",
                    "type": "String"
                }
            ],
            "class": "DialogsTimed",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 299,
            "description": "General function that opens a dialog, fills it with HTML content and closes it after a configured time.",
            "itemtype": "method",
            "name": "showTimedPopUp",
            "params": [
                {
                    "name": "content",
                    "description": "HTML content",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "HTML id of the dialog",
                    "type": "String"
                }
            ],
            "class": "DialogsTimed",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 333,
            "description": "Dialog containing a form used to send a notification about modifications of a public lesson.",
            "itemtype": "method",
            "name": "showLessonNotificationPopUp",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id in the database of the lesson",
                    "type": "Number"
                }
            ],
            "class": "DialogsWithForm",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 368,
            "description": "Dialog containing the form to upload a new document or media element. This function interacts with the module {{#crossLinkModule \"uploader\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "showLoadPopUp",
            "params": [
                {
                    "name": "type",
                    "description": "either 'document' or 'media-element'",
                    "type": "String"
                }
            ],
            "class": "DialogsWithForm",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 409,
            "description": "Dialog containing the document general information. This dialog contains also the form to change title and description (see the method {{#crossLink \"MediaElementEditorForms/resetDocumentChangeInfo:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "showDocumentInfoPopUp",
            "params": [
                {
                    "name": "document_id",
                    "description": "id in the database of the document",
                    "type": "Number"
                }
            ],
            "class": "DialogsWithForm",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 448,
            "description": "Dialog containing the media element general information. If the element is private, this same dialog contains the form to change title, description and tags (see the method {{#crossLink \"MediaElementEditorForms/resetMediaElementChangeInfo:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "showMediaElementInfoPopUp",
            "params": [
                {
                    "name": "media_element_id",
                    "description": "id in the database of the media element",
                    "type": "Number"
                }
            ],
            "class": "DialogsWithForm",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 501,
            "description": "Dialog containing the form to send the public link of a lesson. Used in {{#crossLink \"VirtualClassroomSendLink\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "showSendLessonLinkPopUp",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id in the database of the lesson",
                    "type": "Number"
                }
            ],
            "class": "DialogsWithForm",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/dialogs.js",
            "line": 545,
            "description": "Dialog containing a list of lessons to be loaded in the Virtual Classroom. Used in {{#crossLink \"VirtualClassroomMultipleLoading\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "showVirtualClassroomQuickSelectPopUp",
            "params": [
                {
                    "name": "content",
                    "description": "HTML content for the list of lessons",
                    "type": "Object"
                }
            ],
            "class": "DialogsWithForm",
            "module": "dialogs"
        },
        {
            "file": "app/assets/javascripts/galleries.js",
            "line": 38,
            "description": "Scale image size form image gallery popup.",
            "itemtype": "method",
            "name": "resizedWidthForImageGallery",
            "params": [
                {
                    "name": "width",
                    "description": "image original width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "image original height",
                    "type": "Number"
                }
            ],
            "class": "GalleriesAccessories",
            "module": "galleries"
        },
        {
            "file": "app/assets/javascripts/galleries.js",
            "line": 57,
            "description": "Initializer for effects of opening a gallery and opening the individual dialog of an element in a gallery: this method calls methods belonging to the class {{#crossLink \"DialogsGalleries\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "galleriesDocumentReady",
            "class": "GalleriesDocumentReady",
            "module": "galleries"
        },
        {
            "file": "app/assets/javascripts/galleries.js",
            "line": 149,
            "description": "Initialize audio gallery in {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "initializeAudioGalleryInAudioEditor",
            "class": "GalleriesInitializers",
            "module": "galleries"
        },
        {
            "file": "app/assets/javascripts/galleries.js",
            "line": 167,
            "description": "Initialize audio gallery in {{#crossLinkModule \"lesson-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "initializeAudioGalleryInLessonEditor",
            "class": "GalleriesInitializers",
            "module": "galleries"
        },
        {
            "file": "app/assets/javascripts/galleries.js",
            "line": 185,
            "description": "Initialize audio gallery in {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "initializeAudioGalleryInVideoEditor",
            "class": "GalleriesInitializers",
            "module": "galleries"
        },
        {
            "file": "app/assets/javascripts/galleries.js",
            "line": 203,
            "description": "Initialize audio gallery in {{#crossLinkModule \"lesson-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "initializeDocumentGalleryInLessonEditor",
            "class": "GalleriesInitializers",
            "module": "galleries"
        },
        {
            "file": "app/assets/javascripts/galleries.js",
            "line": 223,
            "description": "Initialize image gallery in {{#crossLinkModule \"image-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "initializeImageGalleryInImageEditor",
            "class": "GalleriesInitializers",
            "module": "galleries"
        },
        {
            "file": "app/assets/javascripts/galleries.js",
            "line": 241,
            "description": "Initialize image gallery in {{#crossLinkModule \"lesson-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "initializeImageGalleryInLessonEditor",
            "class": "GalleriesInitializers",
            "module": "galleries"
        },
        {
            "file": "app/assets/javascripts/galleries.js",
            "line": 259,
            "description": "Initialize mixed gallery in {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "initializeMixedGalleryInVideoEditor",
            "class": "GalleriesInitializers",
            "module": "galleries"
        },
        {
            "file": "app/assets/javascripts/galleries.js",
            "line": 295,
            "description": "Initialize video gallery in {{#crossLinkModule \"lesson-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "initializeVideoGalleryInLessonEditor",
            "class": "GalleriesInitializers",
            "module": "galleries"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 10,
            "description": "Calculates in which page the user is going to be redirected when he is watching a paginated list of items, and he resizes the screen. Used for example in the dashboard, and in the section of media elements.",
            "itemtype": "method",
            "name": "calculateTheNewVisiblePage",
            "params": [
                {
                    "name": "for_page",
                    "description": "items for page before resizing",
                    "type": "Number"
                },
                {
                    "name": "page",
                    "description": "page the user was visualizing before resizing",
                    "type": "Number"
                },
                {
                    "name": "new_for_page",
                    "description": "items for page after resizing",
                    "type": "Number"
                }
            ],
            "class": "GeneralCentering",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 26,
            "description": "Centers a div into the current window.",
            "itemtype": "method",
            "name": "centerThis",
            "params": [
                {
                    "name": "div",
                    "description": "HTML selector to be centered",
                    "type": "String"
                }
            ],
            "class": "GeneralCentering",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 40,
            "description": "Centers a div into a given container.",
            "itemtype": "method",
            "name": "centerThisInContainer",
            "params": [
                {
                    "name": "div",
                    "description": "HTML selector to be centered",
                    "type": "String"
                },
                {
                    "name": "container",
                    "description": "HTML selector that represents the container in which the div must be centered",
                    "type": "String"
                }
            ],
            "class": "GeneralCentering",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 55,
            "description": "Same structure of {{#crossLink \"DashboardResizing/dashboardResizeController:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "mediaElementsResizeController",
            "params": [
                {
                    "name": "resize_before",
                    "description": "if true, it resizes the elements also before calling the server",
                    "type": "Boolean"
                },
                {
                    "name": "with_fade",
                    "description": "if true, it resizes with a fade",
                    "type": "Boolean"
                },
                {
                    "name": "new_page",
                    "description": "forced page if any",
                    "type": "Number"
                }
            ],
            "class": "GeneralCentering",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 91,
            "description": "Same structure of {{#crossLink \"DashboardResizing/resizeLessonsAndMediaElementsInDashboard:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "resizeExpandedMediaElements",
            "params": [
                {
                    "name": "for_row",
                    "description": "how many media elements fit horizontally the screen",
                    "type": "Number"
                }
            ],
            "class": "GeneralCentering",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 126,
            "description": "This function guesses the browser and writes it in a class of the tag 'html'.",
            "itemtype": "method",
            "name": "browsersDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 140,
            "description": "Initializer for functionalities which are common to sections containing media elements.",
            "itemtype": "method",
            "name": "commonMediaElementsDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 206,
            "description": "Initializer for functionalities which are common to sections containing lessons.",
            "itemtype": "method",
            "name": "commonLessonsDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 255,
            "description": "Initializer for global functionalities, used throughout the application.",
            "itemtype": "method",
            "name": "globalDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 290,
            "description": "Initializer for locations automatic filling.",
            "itemtype": "method",
            "name": "locationsDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 323,
            "description": "Initializes reports forms for both lessons and media elements.",
            "itemtype": "method",
            "name": "reportsDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 368,
            "description": "Functionalities necessary only for the section 'my documents'.",
            "itemtype": "method",
            "name": "sectionDocumentsDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 477,
            "description": "Functionalities necessary only for the section 'my lessons'.",
            "itemtype": "method",
            "name": "sectionLessonsDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 493,
            "description": "Functionalities necessary only for the section 'my media elements'.",
            "itemtype": "method",
            "name": "sectionMediaElementsDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 546,
            "description": "Functionalities necessary only for the sections containing notifications.",
            "itemtype": "method",
            "name": "sectionNotificationsDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 580,
            "description": "Functionalities necessary only for the section 'search'.",
            "itemtype": "method",
            "name": "sectionSearchDocumentReady",
            "class": "GeneralDocumentReady",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 605,
            "description": "Browser support checking, supported browsers version. It is empty. The not supported browsers version is implemented in {{#crossLink \"BrowserSupportMain/browserSupportMain:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "browserSupport",
            "class": "GeneralMiscellanea",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 613,
            "description": "Hides the mini thumbnail of a compact media element.",
            "itemtype": "method",
            "name": "hideMiniThumbnailForMediaElementCompact",
            "params": [
                {
                    "name": "item",
                    "description": "the compact media element",
                    "type": "Object"
                }
            ],
            "class": "GeneralMiscellanea",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 635,
            "description": "Initializes global variables used throughout the javascripts.",
            "itemtype": "method",
            "name": "initializeGlobalVariables",
            "class": "GeneralMiscellanea",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 651,
            "description": "Shows a red error icon when somethings goes wrong. Widely used in {{#crossLinkModule \"lesson-editor\"}}{{/crossLinkModule}} and in {{#crossLinkModule \"image-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "redError",
            "class": "GeneralMiscellanea",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 662,
            "description": "Function to convert seconds into a time string of the kind <i>02:35</i>; used in {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}} and in {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "secondsToDateString",
            "params": [
                {
                    "name": "seconds",
                    "description": "the seconds to be converted",
                    "type": "Number"
                }
            ],
            "class": "GeneralMiscellanea",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 690,
            "description": "Handles the errors inside standard forms.",
            "itemtype": "method",
            "name": "showFormErrors",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object for the specific uploader (audio, video, image or document)",
                    "type": "Object"
                },
                {
                    "name": "errors",
                    "description": "a hash of the kind 'field': 'error'. It can't be undefined!",
                    "type": "Hash"
                }
            ],
            "class": "GeneralMiscellanea",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 714,
            "description": "Shows the mini thumbnail of a compact media element.",
            "itemtype": "method",
            "name": "showMiniThumbnailForMediaElementCompact",
            "params": [
                {
                    "name": "item",
                    "description": "the compact media element",
                    "type": "Object"
                }
            ],
            "class": "GeneralMiscellanea",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 757,
            "description": "Removes a parameter from an url.",
            "itemtype": "method",
            "name": "removeURLParameter",
            "params": [
                {
                    "name": "url",
                    "description": "initial url",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "param to remove",
                    "type": "String"
                }
            ],
            "return": {
                "description": "updated url",
                "type": "String"
            },
            "class": "GeneralUrls",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/general.js",
            "line": 783,
            "description": "Adds or update new parameters to an url.",
            "itemtype": "method",
            "name": "updateURLParameter",
            "params": [
                {
                    "name": "url",
                    "description": "initial url",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "parameter",
                    "type": "String"
                },
                {
                    "name": "paramVal",
                    "description": "new value for the parameter",
                    "type": "String"
                }
            ],
            "return": {
                "description": "updated url",
                "type": "String"
            },
            "class": "GeneralUrls",
            "module": "general"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 18,
            "description": "General initializer for Image Editor.",
            "itemtype": "method",
            "name": "imageEditorDocumentReady",
            "class": "ImageEditorDocumentReady",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 30,
            "description": "Initializer for crop mode: it contains the initialization of the JQueryUi plugin <b>imgAreaSelect</b>.",
            "itemtype": "method",
            "name": "imageEditorDocumentReadyCrop",
            "class": "ImageEditorDocumentReady",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 82,
            "description": "Initializer for the general graphical properties of the editor: position and resizing of the image, etc.",
            "itemtype": "method",
            "name": "imageEditorDocumentReadyGeneral",
            "class": "ImageEditorDocumentReady",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 96,
            "description": "Initializer for text inserting mode. It includes the initialization of JQueryUi draggable for the small text areas inside the image.",
            "itemtype": "method",
            "name": "imageEditorDocumentReadyTexts",
            "class": "ImageEditorDocumentReady",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 197,
            "description": "Initializer for the route linked to the action 'undo', that undoes the last step of editing.",
            "itemtype": "method",
            "name": "imageEditorDocumentReadyUndo",
            "class": "ImageEditorDocumentReady",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 215,
            "description": "Function that closes the crop mode (notice that the imgAreaSelect initialized in {{#crossLink \"ImageEditorDocumentReady/imageEditorDocumentReadyCrop:method\"}}{{/crossLink}} is disabled too).",
            "itemtype": "method",
            "name": "resetImageEditorCrop",
            "class": "ImageEditorGraphics",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 230,
            "description": "Function that is used together with both {{#crossLink \"ImageEditorGraphics/resetImageEditorCrop:method\"}}{{/crossLink}} and {{#crossLink \"ImageEditorGraphics/resetImageEditorTexts:method\"}}{{/crossLink}}: it resets the icons on the left column, and all the accessories of the two editing modes.",
            "itemtype": "method",
            "name": "resetImageEditorOperationsChoice",
            "class": "ImageEditorGraphics",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 243,
            "description": "Function that closes the texts inserting mode (it's removed also the class <i>text enabled</i>, initialized in {{#crossLink \"ImageEditorDocumentReady/imageEditorDocumentReadyTexts:method\"}}{{/crossLink}}, that makes the image sensitive to the click of the user for the creation of small text areas).",
            "itemtype": "method",
            "name": "resetImageEditorTexts",
            "class": "ImageEditorGraphics",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 259,
            "description": "Get image relative position into editor container.",
            "itemtype": "method",
            "name": "getRelativePositionInImageEditor",
            "params": [
                {
                    "name": "obj",
                    "description": "image",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "click event",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "image relative position coordinates",
                "type": "Array"
            },
            "class": "ImageEditorImageScale",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 281,
            "description": "Selects a text area (this function is called when the user clicks on a textarea in the image).",
            "itemtype": "method",
            "name": "enlightTextarea",
            "params": [
                {
                    "name": "id",
                    "description": "unique identifier for the textarea, used to extract its HTML id",
                    "type": "Number"
                }
            ],
            "class": "ImageEditorTexts",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 293,
            "description": "Gets the coordinates of a textarea while dragging.",
            "itemtype": "method",
            "name": "getDragPosition",
            "params": [
                {
                    "name": "obj",
                    "description": "textarea container",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "two items array with X,Y coordinates in pixels",
                "type": "Array"
            },
            "class": "ImageEditorTexts",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 311,
            "description": "Used together with {{#crossLink \"ImageEditorTexts/enlightTextAreas:method\"}}{{/crossLink}}, it disables all text areas in the image.",
            "itemtype": "method",
            "name": "offlightTextarea",
            "class": "ImageEditorTexts",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/image_editor.js",
            "line": 322,
            "description": "Extracts a new empty textarea, and appends it to the image at given coordinates.",
            "itemtype": "method",
            "name": "textAreaImageEditorContent",
            "params": [
                {
                    "name": "coords",
                    "description": "textarea coordinates",
                    "type": "Array"
                },
                {
                    "name": "textCount",
                    "description": "unique identifier for the textarea, used to extract its HTML id",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "HTML of the new textarea container",
                "type": "String"
            },
            "class": "ImageEditorTexts",
            "module": "image-editor"
        },
        {
            "file": "app/assets/javascripts/jquery_browser.js",
            "line": 22,
            "description": "Use of jQuery.browser is frowned upon. More details: http://api.jquery.com/jQuery.browser. jQuery.uaMatch maintained for back-compat",
            "itemtype": "method",
            "name": "browsersDetectionGeneral",
            "class": "JqueryBrowsersDetection",
            "module": "jquery-browsers"
        },
        {
            "file": "app/assets/javascripts/jquery_browser.js",
            "line": 59,
            "description": "Chrome is Webkit, but Webkit is also Safari.",
            "itemtype": "method",
            "name": "browsersDetectionSafariAndChrome",
            "class": "JqueryBrowsersDetection",
            "module": "jquery-browsers"
        },
        {
            "file": "app/assets/javascripts/jquery_patches.js",
            "line": 12,
            "description": "If the browser is Chrome, it returns body, otherwise it returns html",
            "itemtype": "method",
            "name": "browserDependingScrollToTag",
            "class": "JqueryPatchesBrowsers",
            "module": "jquery-patches"
        },
        {
            "file": "app/assets/javascripts/jquery_patches.js",
            "line": 21,
            "description": "Checks if the application must autoplay media",
            "itemtype": "method",
            "name": "mustAutoplayMediaInLessonViewer",
            "class": "JqueryPatchesBrowsers",
            "module": "jquery-patches"
        },
        {
            "file": "app/assets/javascripts/jquery_patches.js",
            "line": 30,
            "description": "Checks if the application must react to swipe",
            "itemtype": "method",
            "name": "mustReactToSwipe",
            "class": "JqueryPatchesBrowsers",
            "module": "jquery-patches"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 26,
            "description": "Hides buttons, adhiacent slides and slide navigation (used before {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadyNewSlideChoice:method\"}}{{/crossLink}} and {{#crossLink \"LessonEditorGalleries/showGalleryInLessonEditor:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "hideEverythingOutCurrentSlide",
            "class": "LessonEditorCurrentSlide",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 39,
            "description": "Hides the template for selection of new slides.",
            "itemtype": "method",
            "name": "hideNewSlideChoice",
            "class": "LessonEditorCurrentSlide",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 57,
            "description": "Opposite of {{#crossLink \"LessonEditorCurrentSlide/hideEverythingOutCurrentSlide:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "showEverythingOutCurrentSlide",
            "class": "LessonEditorCurrentSlide",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 70,
            "description": "Shows the template for selection of new slides.",
            "itemtype": "method",
            "name": "showNewSlideOptions",
            "class": "LessonEditorCurrentSlide",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 89,
            "description": "Stop video and audio playing into the current slide (used before changing slide with {{#crossLink \"LessonEditorSlidesNavigation/slideTo:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "stopMediaInCurrentSlide",
            "class": "LessonEditorCurrentSlide",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 100,
            "description": "Switches the titles of disabled and enabled buttons when the user reaches the maximum number of allowed slides.",
            "itemtype": "method",
            "name": "switchDisabledMaximumSlideNumberLessonEditor",
            "class": "LessonEditorCurrentSlide",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 118,
            "description": "General initialization of Lesson Editor.",
            "itemtype": "method",
            "name": "lessonEditorDocumentReady",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 137,
            "description": "Initializer of the three functionalities to add an element (image, audio, video).",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadyAddMediaElement",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 263,
            "description": "Initializer for galleries.",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadyGalleries",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 375,
            "description": "Initializer for dynamics of inscriptions and deinscriptions of images (it uses {{#crossLink \"LessonEditorJqueryAnimations/lessonEditorInscribeImage:method\"}}{{/crossLink}} and {{#crossLink \"LessonEditorJqueryAnimations/lessonEditorDeinscribeImage:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadyInitializeImageInscription",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 389,
            "description": "Initializer for JQueryUi animations defined in the class {{#crossLink \"LessonEditorJqueryAnimations\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadyJqueryAnimations",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 406,
            "description": "Initializer for the template that contains the list of possible slides to be added.",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadyNewSlideChoice",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 426,
            "description": "Initializer for the mouseover and mouseout to replace a media element already added.",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadyReplaceMediaElement",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 486,
            "description": "Initializer for window resize.",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadyResize",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 509,
            "description": "Initializer for the buttons on the right side of each slide.",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadySlideButtons",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 557,
            "description": "Initializer for the scroll and all the actions of the slide navigator (see the class {{#crossLink \"LessonEditorSlidesNavigation\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadySlidesNavigator",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 605,
            "description": "Initializer for the placeholders of text inputs throughout the Lesson Editor.",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadyTextFields",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 659,
            "description": "Initializer for specific media elements or documents uploader inside the Lesson Editor.",
            "itemtype": "method",
            "name": "lessonEditorDocumentReadyUploaderInGallery",
            "class": "LessonEditorDocumentReady",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 794,
            "description": "Save current slide. It sends tinyMCE editor content to form data to be serialized, it handles form placeholders.",
            "itemtype": "method",
            "name": "saveCurrentSlide",
            "params": [
                {
                    "name": "action_suffix",
                    "description": "action suffix to be appended after 'save' (it can be 'save_and_edit' or 'save_and_exit', or just 'save', see also {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadySlideButtons:merthod\"}}{{/crossLink}})",
                    "type": "String"
                },
                {
                    "name": "with_loader",
                    "description": "if true shows the loader while calling ajax",
                    "type": "Boolean"
                }
            ],
            "class": "LessonEditorForms",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 853,
            "description": "Hides the small popup containing the description of a document inside the document gallery.",
            "itemtype": "method",
            "name": "hidePopuppina",
            "params": [
                {
                    "name": "id",
                    "description": "HTML id of the document",
                    "type": "String"
                }
            ],
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 863,
            "description": "Loads the documents from the slide to the gallery.",
            "itemtype": "method",
            "name": "loadDocumentGalleryContent",
            "params": [
                {
                    "name": "slide_id",
                    "description": "the id of the slide",
                    "type": "Number"
                }
            ],
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 881,
            "description": "Loads the specific gallery for documents relative to a slide. The gallery is supposed to have already been loaded previously, by {{#crossLink \"LessonEditorGalleries/showDocumentGalleryInLessonEditor:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "loadDocumentGalleryForSlideInLessonEditor",
            "params": [
                {
                    "name": "slide_id",
                    "description": "the id of the slide",
                    "type": "Number"
                }
            ],
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 893,
            "description": "Handles correct uploading process in the Lesson Editor (correct in the sense that the file is not too large and could correctly be received by the web server).",
            "itemtype": "method",
            "name": "reloadGalleryInLessonEditor",
            "params": [
                {
                    "name": "selector",
                    "description": "HTML selector for the specific uploader (audio, video, image or document)",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "'image', 'audio', 'video', or 'document'",
                    "type": "String"
                },
                {
                    "name": "gallery",
                    "description": "the HTML content to be replaced into the gallery, if the uploading was successful",
                    "type": "String"
                },
                {
                    "name": "pages",
                    "description": "number of pages of the newly loaded gallery",
                    "type": "Number"
                },
                {
                    "name": "count",
                    "description": "number of elements inside the gallery",
                    "type": "Number"
                },
                {
                    "name": "item_id",
                    "description": "id of the newly loaded item (used only for documents)",
                    "type": "Number"
                }
            ],
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 959,
            "description": "Hides media gallery for selected type.",
            "itemtype": "method",
            "name": "removeGalleryInLessonEditor",
            "params": [
                {
                    "name": "sti_type",
                    "description": "gallery type",
                    "type": "String"
                }
            ],
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 971,
            "description": "Resets the filter of documents in the gallery.",
            "itemtype": "method",
            "name": "resetDocumentGalleryFilter",
            "params": [
                {
                    "name": "callback",
                    "description": "to be called after ajax",
                    "type": "Function"
                },
                {
                    "name": "otherwise",
                    "description": "to be called if there is no filter to reset",
                    "type": "Function"
                }
            ],
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1002,
            "description": "Shows document gallery.",
            "itemtype": "method",
            "name": "showDocumentGalleryInLessonEditor",
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1039,
            "description": "Shows media gallery for selected type.",
            "itemtype": "method",
            "name": "showGalleryInLessonEditor",
            "params": [
                {
                    "name": "obj",
                    "description": "HTML selector for the button that opens the gallery (used to extract the position of the current slide)",
                    "type": "String"
                },
                {
                    "name": "sty_type",
                    "description": "gallery type",
                    "type": "String"
                }
            ],
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1065,
            "description": "Shows the small popup containing the description of a document inside the document gallery.",
            "itemtype": "method",
            "name": "showPopuppina",
            "params": [
                {
                    "name": "id",
                    "description": "HTML id of the document",
                    "type": "String"
                }
            ],
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1114,
            "description": "Unloads the documents to the slide.",
            "itemtype": "method",
            "name": "unLoadDocumentGalleryContent",
            "params": [
                {
                    "name": "slide_id",
                    "description": "the id of the slide",
                    "type": "Number"
                }
            ],
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1132,
            "description": "Updates the faded documents and the gallery is locked if three documents are loaded.",
            "itemtype": "method",
            "name": "updateEffectsInsideDocumentGallery",
            "class": "LessonEditorGalleries",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1168,
            "description": "Returns the width of the image space for the kind of slide.",
            "itemtype": "method",
            "name": "getHorizontalStandardSizeOfSlideImage",
            "params": [
                {
                    "name": "kind",
                    "description": "type image into slide, accepts values: cover, image1, image2, image3, image4",
                    "type": "String"
                }
            ],
            "return": {
                "description": "width of the image space for this kind of slide",
                "type": "Number"
            },
            "class": "LessonEditorImageResizing",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1192,
            "description": "Returns the height of the image space for the kind of slide.",
            "itemtype": "method",
            "name": "getVerticalStandardSizeOfSlideImage",
            "params": [
                {
                    "name": "kind",
                    "description": "type image into slide, accepts values: cover, image1, image2, image3, image4",
                    "type": "String"
                }
            ],
            "return": {
                "description": "height of the image space for this kind of slide",
                "type": "Number"
            },
            "class": "LessonEditorImageResizing",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1216,
            "description": "Check if image ratio is bigger then kind ratio.",
            "itemtype": "method",
            "name": "isHorizontalMask",
            "params": [
                {
                    "name": "width",
                    "description": "width of the image",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height of the image",
                    "type": "Number"
                },
                {
                    "name": "kind",
                    "description": "type image into slide, accepts values: cover, image1, image2, image3, image4",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the image is horizontal, false if vertical",
                "type": "Boolean"
            },
            "class": "LessonEditorImageResizing",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1244,
            "description": "Gets scaled height to slide images.",
            "itemtype": "method",
            "name": "resizeHeight",
            "params": [
                {
                    "name": "image_width",
                    "description": "width of the image",
                    "type": "Number"
                },
                {
                    "name": "image_height",
                    "description": "height of the image",
                    "type": "Number"
                },
                {
                    "name": "kind",
                    "description": "type image into slide, accepts values: cover, image1, image2, image3, image4",
                    "type": "String"
                }
            ],
            "return": {
                "description": "scaled height",
                "type": "Number"
            },
            "class": "LessonEditorImageResizing",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1257,
            "description": "Gets scaled width to slide images.",
            "itemtype": "method",
            "name": "resizeWidth",
            "params": [
                {
                    "name": "width",
                    "description": "width of the image",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height of the image",
                    "type": "Number"
                },
                {
                    "name": "kind",
                    "description": "type image into slide, accepts values: cover, image1, image2, image3, image4",
                    "type": "String"
                }
            ],
            "return": {
                "description": "scaled width",
                "type": "Number"
            },
            "class": "LessonEditorImageResizing",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1274,
            "description": "Inizializes jQueryUI <b>sortable</b> function on top navigation numbers, so that they can be sorted (see also {{#crossLink \"LessonEditorDocumentReady/lessonEditorDocumentReadySlidesNavigator:method\"}}{{/crossLink}} and {{#crossLink \"LessonEditorSlidesNavigation\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "initializeSortableNavs",
            "class": "LessonEditorJqueryAnimations",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1319,
            "description": "Method that deinscribes the image.",
            "itemtype": "method",
            "name": "lessonEditorDeinscribeImage",
            "params": [
                {
                    "name": "place_id",
                    "description": "HTML id for the container to make draggable",
                    "type": "String"
                }
            ],
            "class": "LessonEditorJqueryAnimations",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1360,
            "description": "Method that inscribes the image.",
            "itemtype": "method",
            "name": "lessonEditorInscribeImage",
            "params": [
                {
                    "name": "place_id",
                    "description": "HTML id for the container to make draggable",
                    "type": "String"
                }
            ],
            "class": "LessonEditorJqueryAnimations",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1401,
            "description": "Inizializes jQueryUI <b>draggable</b> function on slide image containers.",
            "itemtype": "method",
            "name": "makeDraggable",
            "params": [
                {
                    "name": "place_id",
                    "description": "HTML id for the container to make draggable",
                    "type": "String"
                }
            ],
            "class": "LessonEditorJqueryAnimations",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1490,
            "description": "Asynchronously loads current slide, previous and following.",
            "itemtype": "method",
            "name": "loadSlideAndAdhiacentInLessonEditor",
            "params": [
                {
                    "name": "slide_id",
                    "description": "id in the database of the current slide, used to extract the HTML id",
                    "type": "Number"
                }
            ],
            "class": "LessonEditorSlideLoading",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1503,
            "description": "Asynchronous slide loading. It checks if the slide has been loaded or not.",
            "itemtype": "method",
            "name": "loadSlideInLessonEditor",
            "params": [
                {
                    "name": "slide",
                    "description": "slide to be loaded",
                    "type": "Object"
                }
            ],
            "class": "LessonEditorSlideLoading",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1522,
            "description": "Initialize slides position to center.",
            "itemtype": "method",
            "name": "initLessonEditorPositions",
            "class": "LessonEditorSlidesNavigation",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1541,
            "description": "Re-initialize slides position to center after ajax events.",
            "itemtype": "method",
            "name": "reInitializeSlidePositionsInLessonEditor",
            "class": "LessonEditorSlidesNavigation",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1553,
            "description": "Scrolls navigation scrollPane ({{#crossLink \"LessonEditorSlidesNavigation\"}}{{/crossLink}}) when moving to another slide.",
            "itemtype": "method",
            "name": "scrollPaneUpdate",
            "params": [
                {
                    "name": "trigger_element",
                    "description": "HTML selector for the element which triggers the scroll",
                    "type": "String"
                }
            ],
            "return": {
                "description": "false, probably to stop further actions",
                "type": "Boolean"
            },
            "class": "LessonEditorSlidesNavigation",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1570,
            "description": "Moves to a slide, update current slide in top navigation.",
            "itemtype": "method",
            "name": "slideTo",
            "params": [
                {
                    "name": "slide_id",
                    "description": "id in the database of the slide, used to extract the HTML id",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "callback function, to be executed after the slide (for instance, this function is used to call {{#crossLink \"LessonEditorCurrentSlide/showNewSlideOptions:method\"}}{{/crossLink}})",
                    "type": "Object"
                }
            ],
            "class": "LessonEditorSlidesNavigation",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1625,
            "description": "TinyMCE callback to clean spans containing classes for font size: these classes are attached to the first ol, ul, p",
            "itemtype": "method",
            "name": "cleanTinyMCESpanTagsFontSize",
            "params": [
                {
                    "name": "editor",
                    "description": "tinyMCE instance",
                    "type": "Object"
                }
            ],
            "class": "LessonEditorTinyMCE",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1646,
            "description": "Initialize tinyMCE editor for a single textarea.",
            "itemtype": "method",
            "name": "initTinymce",
            "params": [
                {
                    "name": "tiny_id",
                    "description": "HTML id of the tinyMCE textarea",
                    "type": "String"
                }
            ],
            "class": "LessonEditorTinyMCE",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1698,
            "description": "TinyMCE callback to show warning when texearea content exceeds the available space. Adds a red border to the textarea.This function is used in tinyMCE setup ({{#crossLink \"LessonEditorTinyMCE/initTinymce:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "handleTinyMCEOveflow",
            "params": [
                {
                    "name": "inst",
                    "description": "tinyMCE instance",
                    "type": "Object"
                },
                {
                    "name": "tiny_id",
                    "description": "HTML id of the tinyMCE textarea",
                    "type": "Number"
                }
            ],
            "class": "LessonEditorTinyMCE",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_editor.js",
            "line": 1721,
            "description": "Function to strip tags in a text pasted inside TinyMCE.",
            "itemtype": "method",
            "name": "stripTagsForCutAndPaste",
            "params": [
                {
                    "name": "str",
                    "description": "string to be stripped",
                    "type": "String"
                },
                {
                    "name": "allowed_tags",
                    "description": "allowed HTML tags",
                    "type": "Array"
                }
            ],
            "class": "LessonEditorTinyMCE",
            "module": "lesson-editor"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 21,
            "description": "Initializer for functionalities of attached documents.",
            "itemtype": "method",
            "name": "lessonViewerDocumentReadyDocuments",
            "class": "LessonViewerDocumentReady",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 35,
            "description": "Initializer for functionalities of the playlist menu.",
            "itemtype": "method",
            "name": "lessonViewerDocumentReadyPlaylist",
            "class": "LessonViewerDocumentReady",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 72,
            "description": "Initializer for functionalities that must be separated in exported lessons.",
            "itemtype": "method",
            "name": "lessonViewerDocumentReadySeparated",
            "class": "LessonViewerDocumentReady",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 91,
            "description": "Initializer for slides navigation.",
            "itemtype": "method",
            "name": "lessonViewerDocumentReadySlidesNavigation",
            "class": "LessonViewerDocumentReady",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 125,
            "description": "Initializer for functionality of sharing the lesson in social networks.",
            "itemtype": "method",
            "name": "lessonViewerDocumentReadySocialNetworks",
            "class": "LessonViewerDocumentReady",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 178,
            "description": "Used only in the exported lesson, to convert the src of Wiris images (this function is not called by the document ready in normal application.js).",
            "itemtype": "method",
            "name": "lessonViewerDocumentReadyWirisConvertSrc",
            "class": "LessonViewerDocumentReady",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 194,
            "description": "Gets the HTML id of the current slide (marked with the class <b>lesson viewer current slide</b>).",
            "itemtype": "method",
            "name": "getLessonViewerCurrentSlide",
            "return": {
                "description": "HTML id of the current slide",
                "type": "String"
            },
            "class": "LessonViewerGeneral",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 204,
            "description": "Hides the documents.",
            "itemtype": "method",
            "name": "hideDocumentsInLessonViewer",
            "class": "LessonViewerGeneral",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 214,
            "description": "Initializes the positions, and selects the right lesson in the playlist menu.",
            "itemtype": "method",
            "name": "initializeLessonViewer",
            "params": [
                {
                    "name": "layout_scope",
                    "description": "the scope of the layout (lesson viewer, lesson archive, lesson scorm)",
                    "type": "String"
                }
            ],
            "class": "LessonViewerGeneral",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 241,
            "description": "Shows the documents.",
            "itemtype": "method",
            "name": "showDocumentsInLessonViewer",
            "class": "LessonViewerGeneral",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 254,
            "description": "Stops media playing in current slide.",
            "itemtype": "method",
            "name": "stopMediaInLessonViewer",
            "class": "LessonViewerGeneral",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 276,
            "description": "Hides slides navigation arrows.",
            "itemtype": "method",
            "name": "hideArrowsInLessonViewer",
            "class": "LessonViewerGraphics",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 285,
            "description": "Shows slides navigation arrows.",
            "itemtype": "method",
            "name": "showArrowsInLessonViewer",
            "class": "LessonViewerGraphics",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 298,
            "description": "Closes the playlist menu and executes a callback.",
            "itemtype": "method",
            "name": "closePlaylistMenuInLessonViewer",
            "params": [
                {
                    "name": "callback",
                    "description": "to call after effect is complete",
                    "type": "Function"
                }
            ],
            "class": "LessonViewerPlaylist",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 313,
            "description": "Opposite of {{#crossLink \"LessonViewerPlaylist/closePlaylistMenuInLessonViewer:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "openPlaylistMenuInLessonViewer",
            "class": "LessonViewerPlaylist",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 325,
            "description": "Huge method that replaces missing functionalities of the bad plugin JScrollPain. The aim of this method is to select a lesson in the menu, adapt the size of the scroll pane, and if required scroll and execute a callback.",
            "itemtype": "method",
            "name": "selectComponentInLessonViewerPlaylistMenu",
            "params": [
                {
                    "name": "component",
                    "description": "selected lesson",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "to call after function is complete (optional)",
                    "type": "Function"
                }
            ],
            "class": "LessonViewerPlaylist",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 415,
            "description": "This method can be used in two ways:\n<ul>\n  <li><b>with callback</b>, if the user clicks on a lesson in the menu</li>\n  <li><b>without callback</b>, if the user gets to a new lesson while navigating normally (he clicks only on <i>next slide</i> and <i>prev slide</i>, see {{#crossLink \"LessonViewerSlidesNavigation/slideToInLessonViewerWithLessonSwitch:method\"}}{{/crossLink}})</li>\n</ul>",
            "itemtype": "method",
            "name": "switchLessonInPlaylistMenuLessonViewer",
            "params": [
                {
                    "name": "lesson_id",
                    "description": "id in the database of the lesson, used to extract the HTML id",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "callback after function is complete (optional)",
                    "type": "Function"
                }
            ],
            "class": "LessonViewerPlaylist",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 438,
            "description": "Goes to next slide using {{#crossLink \"LessonViewerSlidesNavigation/slideToInLessonViewer:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "goToNextSlideInLessonViewer",
            "params": [
                {
                    "name": "callback",
                    "description": "callback after slide switch (it can't be undefined, since this function is called only clicking on the arrows; anyway, nothing would prevent the use of this function with undefined callback)",
                    "type": "Function"
                }
            ],
            "class": "LessonViewerSlidesNavigation",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 453,
            "description": "Goes to previous slide using {{#crossLink \"LessonViewerSlidesNavigation/slideToInLessonViewer:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "goToPrevSlideInLessonViewer",
            "params": [
                {
                    "name": "callback",
                    "description": "callback after slide switch (it can't be undefined, since this function is called only clicking on the arrows; anyway, nothing would prevent the use of this function with undefined callback)",
                    "type": "Function"
                }
            ],
            "class": "LessonViewerSlidesNavigation",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 468,
            "description": "Loads the slide without making any ajax call.",
            "itemtype": "method",
            "name": "loadSlideInLessonViewer",
            "class": "LessonViewerSlidesNavigation",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 500,
            "description": "Function to attach to the arrows",
            "itemtype": "method",
            "name": "moveToAdhiacentSlideInLessonViewer",
            "params": [
                {
                    "name": "scrolls",
                    "description": "arrows which must be enabled",
                    "type": "Object"
                },
                {
                    "name": "movingFunction",
                    "description": "function to be called to move",
                    "type": "Function"
                }
            ],
            "class": "LessonViewerSlidesNavigation",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 517,
            "description": "Goes to a given slide. If the new slide contains a media and the browser is not a mobile the media is automaticly played.",
            "itemtype": "method",
            "name": "slideToInLessonViewer",
            "params": [
                {
                    "name": "to",
                    "description": "destination slide",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "callback after slide switch (it can be undefined)",
                    "type": "Function"
                }
            ],
            "class": "LessonViewerSlidesNavigation",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/lesson_viewer.js",
            "line": 568,
            "description": "Goes to a slide (using {{#crossLink \"LessonViewerSlidesNavigation/slideToInLessonViewer:method\"}}{{/crossLink}}) and updates the lesson in playlist menu (using {{#crossLink \"LessonViewerPlaylist/switchLessonInPlaylistMenuLessonViewer:method\"}}{{/crossLink}} without callbacks).",
            "itemtype": "method",
            "name": "slideToInLessonViewerWithLessonSwitch",
            "params": [
                {
                    "name": "component",
                    "description": "destination slide",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "callback after slide switch (it can't be undefined, since this function is called only clicking on the arrows; anyway, nothing would prevent the use of this function with undefined callback)",
                    "type": "Function"
                }
            ],
            "class": "LessonViewerSlidesNavigation",
            "module": "lesson-viewer"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 10,
            "description": "One step of the repeated <b>cache</b> saving (used in {{#crossLinkModule \"image-editor\"}}{{/crossLinkModule}} and {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}).",
            "itemtype": "method",
            "name": "saveCacheLoop",
            "class": "MediaElementEditorCache",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 26,
            "description": "Initializes the <b>cache loop</b> and starts it calling {{#crossLink \"MediaElementEditorCache/saveCacheLoop:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "startCacheLoop",
            "class": "MediaElementEditorCache",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 36,
            "description": "Stops the cache loop.",
            "itemtype": "method",
            "name": "stopCacheLoop",
            "class": "MediaElementEditorCache",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 46,
            "description": "Submethod of {{#crossLink \"MediaElementEditorCache/saveCacheLoop:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "submitMediaElementEditorCacheForm",
            "class": "MediaElementEditorCache",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 65,
            "description": "Function that checks the conversion of the unconverted media elements in the page. Same structure of {{#crossLink \"MediaElementEditorConversion/mediaElementLoaderConversionOverview:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "lessonEditorConversionOverview",
            "params": [
                {
                    "name": "list",
                    "description": "list of media elements that are being checked",
                    "type": "Array"
                },
                {
                    "name": "time",
                    "description": "time to iterate the loop",
                    "type": "Number"
                }
            ],
            "class": "MediaElementEditorConversion",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 107,
            "description": "Function that checks the conversion of the unconverted media elements in the page. Same structure of {{#crossLink \"MediaElementEditorConversion/lessonEditorConversionOverview:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "mediaElementLoaderConversionOverview",
            "params": [
                {
                    "name": "list",
                    "description": "list of media elements that are being checked",
                    "type": "Array"
                },
                {
                    "name": "time",
                    "description": "time to iterate the loop",
                    "type": "Number"
                }
            ],
            "class": "MediaElementEditorConversion",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 147,
            "description": "Shows the message after the conversion ended inside Lesson Editor.",
            "itemtype": "method",
            "name": "uploaderConversionChecker",
            "params": [
                {
                    "name": "selector",
                    "description": "selector for the correct translation to be shown",
                    "type": "String"
                },
                {
                    "name": "title",
                    "description": "the title of the item",
                    "type": "String"
                }
            ],
            "class": "MediaElementEditorConversion",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 174,
            "description": "Initializes the placeholder of the <b>commit forms</b> used in {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}, {{#crossLinkModule \"image-editor\"}}{{/crossLinkModule}} and {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "mediaElementEditorDocumentReady",
            "class": "MediaElementEditorDocumentReady",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 357,
            "description": "Hides the commit form for overwrite or for new element (depending on the parameter).",
            "itemtype": "method",
            "name": "hideCommitMediaElementEditorForm",
            "params": [
                {
                    "name": "type",
                    "description": "'audio', 'image', or 'video'",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "it can be either 'edit' or 'new'",
                    "type": "String"
                }
            ],
            "class": "MediaElementEditorForms",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 372,
            "description": "Resets the media element loading form; used in {{#crossLink \"DialogsWithForm/showDocumentInfoPopUp:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "resetDocumentChangeInfo",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object of the form",
                    "type": "Object"
                }
            ],
            "class": "MediaElementEditorForms",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 385,
            "description": "Resets the media element loading form; used in {{#crossLink \"DialogsWithForm/showMediaElementInfoPopUp:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "resetMediaElementChangeInfo",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object of the form",
                    "type": "Object"
                }
            ],
            "class": "MediaElementEditorForms",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 406,
            "description": "Shows the commit form for overwrite or for new element (depending on the parameter).",
            "itemtype": "method",
            "name": "showCommitMediaElementEditorForm",
            "params": [
                {
                    "name": "type",
                    "description": "'audio', 'image', or 'video'",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "it can be either 'edit' or 'new'",
                    "type": "String"
                }
            ],
            "class": "MediaElementEditorForms",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 425,
            "description": "Submethod used in the methods of {{#crossLink \"VideoEditorScrollPain\"}}{{/crossLink}}: calculates the correct movement that a horizontal <b>left</b> scroll must do taking into consideration the space available (thing that obviously JScrollPain doesn't do itself).",
            "itemtype": "method",
            "name": "calculateCorrectMovementHorizontalScrollLeft",
            "params": [
                {
                    "name": "hidden",
                    "description": "the portion of the scroll hidden on the left",
                    "type": "Float"
                },
                {
                    "name": "movement",
                    "description": "the required movement",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "the correct movement to do",
                "type": "Float"
            },
            "class": "MediaElementEditorHorizontalTimelines",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 441,
            "description": "Submethod used in the methods of {{#crossLink \"VideoEditorScrollPain\"}}{{/crossLink}}: calculates the correct movement that a horizontal <b>right</b> scroll must do taking into consideration the space available (thing that obviously JScrollPain doesn't do itself).",
            "itemtype": "method",
            "name": "calculateCorrectMovementHorizontalScrollRight",
            "params": [
                {
                    "name": "hidden",
                    "description": "the portion of the scroll hidden on the left",
                    "type": "Float"
                },
                {
                    "name": "movement",
                    "description": "the required movement",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "the correct movement to do",
                "type": "Float"
            },
            "class": "MediaElementEditorHorizontalTimelines",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 453,
            "description": "Submethod used in the methods of {{#crossLink \"VideoEditorScrollPain\"}}{{/crossLink}}: calculates the absolute position to be assigned to <b>a div that must be aligned to the component</b> after having been moved to first position.",
            "itemtype": "method",
            "name": "getAbsolutePositionTimelineHorizontalScrollPane",
            "params": [
                {
                    "name": "jscrollpane_id",
                    "description": "the HTML id of the scroll pane",
                    "type": "String"
                },
                {
                    "name": "component_width",
                    "description": "the width in pixels of a single component",
                    "type": "Number"
                },
                {
                    "name": "component_position",
                    "description": "the position among the other components",
                    "type": "Number"
                },
                {
                    "name": "components_visible_number",
                    "description": "how many components are visible at the same time in the scroll pane",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the correct position of the div in pixels (it's not float because we pass to the method only integers, unlike {{#crossLink \"MediaElementEditorHorizontalTimelines/calculateCorrectMovementHorizontalScrollRight:method\"}}{{/crossLink}} and {{#crossLink \"MediaElementEditorHorizontalTimelines/calculateCorrectMovementHorizontalScrollRight:method\"}}{{/crossLink}} that are defined generally)",
                "type": "Number"
            },
            "class": "MediaElementEditorHorizontalTimelines",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 475,
            "description": "Submethod used in the methods of {{#crossLink \"VideoEditorScrollPain\"}}{{/crossLink}}: gets how many components are hidden to the left of the scroll pane.",
            "itemtype": "method",
            "name": "getHowManyComponentsHiddenToLeftTimelineHorizontalScrollPane",
            "params": [
                {
                    "name": "jscrollpane_id",
                    "description": "the HTML id of the scroll pane",
                    "type": "String"
                },
                {
                    "name": "component_width",
                    "description": "the width in pixels of a single component",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the number of components hidden to the left",
                "type": "Number"
            },
            "class": "MediaElementEditorHorizontalTimelines",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/media_element_editor.js",
            "line": 488,
            "description": "Submethod used in the methods of {{#crossLink \"VideoEditorScrollPain\"}}{{/crossLink}}: exactly the same as {{#crossLink \"MediaElementEditorHorizontalTimelines/getAbsolutePositionTimelineHorizontalScrollPane:method\"}}{{/crossLink}}, but <b>it returns the position of the scroll pane</b> instead of the absolute pixels for an external div.",
            "itemtype": "method",
            "name": "getNormalizedPositionTimelineHorizontalScrollPane",
            "params": [
                {
                    "name": "jscrollpane_id",
                    "description": "the HTML id of the scroll pane",
                    "type": "String"
                },
                {
                    "name": "component_width",
                    "description": "the width in pixels of a single component",
                    "type": "Number"
                },
                {
                    "name": "component_position",
                    "description": "the position among the other components",
                    "type": "Number"
                },
                {
                    "name": "components_visible_number",
                    "description": "how many components are visible at the same time in the scroll pane",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the correct position of the scroll in pixels",
                "type": "Number"
            },
            "class": "MediaElementEditorHorizontalTimelines",
            "module": "media-element-editor"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 10,
            "description": "Closes the div containig an expanded notification.",
            "itemtype": "method",
            "name": "hideExpandedNotification",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 20,
            "description": "Hides the help button.",
            "itemtype": "method",
            "name": "hideHelpButton",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 29,
            "description": "Hides the help tooltip.",
            "itemtype": "method",
            "name": "hideHelpTooltip",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 38,
            "description": "Hides the notifications button.",
            "itemtype": "method",
            "name": "hideNotificationsButton",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 47,
            "description": "Hides the notifications orange icon over the notifications button.",
            "itemtype": "method",
            "name": "hideNotificationsFumetto",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 56,
            "description": "Hides the notifications tooltip.",
            "itemtype": "method",
            "name": "hideNotificationsTooltip",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 66,
            "description": "Shows the help button.",
            "itemtype": "method",
            "name": "showHelpButton",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 75,
            "description": "Shows the help tooltip.",
            "itemtype": "method",
            "name": "showHelpTooltip",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 84,
            "description": "Shows the notifications button.",
            "itemtype": "method",
            "name": "showNotificationsButton",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 93,
            "description": "Shows the notifications orange icon over the notifications button.",
            "itemtype": "method",
            "name": "showNotificationsFumetto",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 102,
            "description": "Shows the notifications tooltip.",
            "itemtype": "method",
            "name": "showNotificationsTooltip",
            "class": "NotificationsAccessories",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 115,
            "description": "Component of document ready for notifications, used to initialize the action of reload on scroll.",
            "itemtype": "method",
            "name": "initializeScrollAtBottomNewBlockNotification",
            "class": "NotificationsDocumentReady",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 131,
            "description": "Global initializer for notifications and help. The function {{#crossLink \"NotificationsDocumentReady/notificationsDocumentReadyLoop:method\"}}{{/crossLink}} is called after a time of 2500 not to be called at the same time of {{#crossLink \"MediaElementEditorConversion/mediaElementLoaderConversionOverview:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "notificationsDocumentReady",
            "class": "NotificationsDocumentReady",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 145,
            "description": "Initializes the form for notifying a lesson's modifications. These actions are linked on the button {{#crossLink \"ButtonsLesson/unpublishLesson:method\"}}{{/crossLink}}, provided that it has the class <i>lesson change not notified</i>.",
            "itemtype": "method",
            "name": "notificationsDocumentReadyLessonModification",
            "class": "NotificationsDocumentReady",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 173,
            "description": "Initializer for the loop that updates the notifications",
            "itemtype": "method",
            "name": "notificationsDocumentReadyLoop",
            "params": [
                {
                    "name": "time",
                    "description": "the time to iterate the loop",
                    "type": "Number"
                }
            ],
            "class": "NotificationsDocumentReady",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 190,
            "description": "General initializer for help and notifications tooltips.",
            "itemtype": "method",
            "name": "notificationsDocumentReadyTooltips",
            "class": "NotificationsDocumentReady",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 211,
            "description": "Initializes the graphical tools of the <b>help tooltip</b>.",
            "itemtype": "method",
            "name": "initializeHelp",
            "class": "NotificationsGraphics",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/notifications.js",
            "line": 232,
            "description": "Initializes the graphical tools and the routes attached to the <b>notifications tooltip</b>.",
            "itemtype": "method",
            "name": "initializeNotifications",
            "class": "NotificationsGraphics",
            "module": "notifications"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 15,
            "description": "This method is fired each time the audio component player receives an event of <b>timeupdate</b>. There are two cases of use of this method:\n<ul>\n  <li>if the Audio Editor <b>is not in preview mode</b>, it operates as a normal player (see {{#crossLink \"PlayersGeneral/initializeActionOfMediaTimeUpdater:method\"}}{{/crossLink}}), with very slight differences due to the different environment</li>\n  <li>if we are <b>in preview mode</b>, the method acts as a counterpart of {{#crossLink \"AudioEditorPreview/startAudioEditorPreview:method\"}}{{/crossLink}}: at any time the seconds increase, the method updates the timer using {{#crossLink \"AudioEditorPreview/increaseAudioEditorPreviewTimer:method\"}}{{/crossLink}}; when the audio is over, if it's not playing the last component, the method calls {{#crossLink \"AudioEditorPreview/startAudioEditorPreview:method\"}}{{/crossLink}} for the following one.</li>\n</ul>",
            "itemtype": "method",
            "name": "initializeActionOfMediaTimeUpdaterInAudioEditor",
            "params": [
                {
                    "name": "media",
                    "description": "HTML selector for the audio",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "unique identifier for the audio component (see {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}})",
                    "type": "Number"
                },
                {
                    "name": "force_parsed_int",
                    "description": "forces the last second of the audio; normally it's <i>false</i>, except the case in which the duration of the audio is very close to the biggest lower integer (for instance, the duration is 10.01, which is very close to 10): in this case, the signal that the audio ended <b>is not received directly by the current method</b>, but rather by the event handler <b>ended</b> initialized in the end of {{#crossLink \"PlayersAudioEditor/initializeAudioEditorCutter:method\"}}{{/crossLink}}",
                    "type": "Boolean"
                }
            ],
            "class": "PlayersAudioEditor",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 74,
            "description": "Initializes two sliders: one (JQueryUi single slider) for the <b>cursor</b>, and one (JQueryUi double slider) for the <b>cutting handles</b>. It also initializes how to handle the event <b>ended</b> associated to the audio.",
            "itemtype": "method",
            "name": "initializeAudioEditorCutter",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the audio component (see {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}})",
                    "type": "Number"
                }
            ],
            "class": "PlayersAudioEditor",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 165,
            "description": "This is the method that associates {{#crossLink \"PlayersAudioEditor/initializeActionOfMediaTimeUpdaterInAudioEditor:method\"}}{{/crossLink}} to the event of <b>timeupdate</b>. Notice that the method waits until he receives the event <b>loadedmetadata</b> before working.",
            "itemtype": "method",
            "name": "initializeMediaTimeUpdaterInAudioEditor",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the audio component (see {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}})",
                    "type": "Number"
                }
            ],
            "class": "PlayersAudioEditor",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 186,
            "description": "Method that <b>updates the audio cursor</b>, in case one of the two handles passes over the cursor (the cursor must follow the handle).",
            "itemtype": "method",
            "name": "selectAudioComponentCutterHandle",
            "params": [
                {
                    "name": "component",
                    "description": "the JQuery object representing the component",
                    "type": "Object"
                },
                {
                    "name": "val",
                    "description": "the value to be assigned",
                    "type": "Number"
                }
            ],
            "class": "PlayersAudioEditor",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 203,
            "description": "Method that logs all the possible events of a given media.",
            "itemtype": "method",
            "name": "mediaEventsLogger",
            "params": [
                {
                    "name": "media",
                    "description": "the jquery object representing a <b>video</b> or an <b>audio</b> tag",
                    "type": "Object"
                }
            ],
            "class": "PlayersCommon",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 234,
            "description": "Sets a time to any media in any environment. Notice that the method waits until he receives the event <b>loadedmetadata</b> before working.",
            "itemtype": "method",
            "name": "setCurrentTimeToMedia",
            "params": [
                {
                    "name": "media",
                    "description": "the jquery object representing a <b>video</b> or an <b>audio</b> tag",
                    "type": "Object"
                },
                {
                    "name": "seek",
                    "description": "the time to be set",
                    "type": "Float"
                }
            ],
            "class": "PlayersCommon",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 251,
            "description": "It shows an alert with error details, in case a media returned error.",
            "itemtype": "method",
            "name": "showLoadingMediaErrorPopup",
            "params": [
                {
                    "name": "code",
                    "description": "the code associated to the error (it can be 1, 2, 3 or 4)",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "either <b>'audio'</b> or <b>'video'</b>",
                    "type": "String"
                }
            ],
            "class": "PlayersCommon",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 267,
            "description": "Stops all media in the page.",
            "itemtype": "method",
            "name": "stopAllMedia",
            "class": "PlayersCommon",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 278,
            "description": "Submethod of {{#crossLink \"PlayersCommon/setCurrentTimeToMedia:method\"}}{{/crossLink}}, used because some browsers (Internet Explorer for instance), get broken if the value of seek is not included in the <b>seekable interval</b>.",
            "itemtype": "method",
            "name": "validSeek",
            "params": [
                {
                    "name": "media",
                    "description": "the jquery object representing a <b>video</b> or an <b>audio</b> tag",
                    "type": "Object"
                },
                {
                    "name": "seek",
                    "description": "the value to be assigned to the media",
                    "type": "Float"
                }
            ],
            "class": "PlayersCommon",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 301,
            "description": "Initializer for buttons inside a cutter in {{#crossLinkModule \"audio-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "playersDocumentReadyAudioEditor",
            "class": "PlayersDocumentReady",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 365,
            "description": "Initializer for buttons inside any player.",
            "itemtype": "method",
            "name": "playersDocumentReadyGeneral",
            "class": "PlayersDocumentReady",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 398,
            "description": "Initializer for buttons inside a cutter in {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}.",
            "itemtype": "method",
            "name": "playersDocumentReadyVideoEditor",
            "class": "PlayersDocumentReady",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 469,
            "description": "Method that handles the event <b>timeupdate</b> for general audio or video players: if we got to the last second, the method rewinds the media, otherwise sets the time to the slider (this happens even if the slider already had that value, unlike the methods {{#crossLink \"PlayersAudioEditor/initializeActionOfMediaTimeUpdaterInAudioEditor:method\"}}{{/crossLink}} and {{#crossLink \"PlayersVideoEditor/initializeActionOfMediaTimeUpdaterInVideoEditor:method\"}}{{/crossLink}} during <b>preview mode</b>).",
            "itemtype": "method",
            "name": "initializeActionOfMediaTimeUpdater",
            "params": [
                {
                    "name": "media",
                    "description": "HTML selector for the audio or video",
                    "type": "String"
                },
                {
                    "name": "reference_id",
                    "description": "HTML id of the unique container of the audio or video",
                    "type": "String"
                }
            ],
            "class": "PlayersGeneral",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 491,
            "description": "Initializes the media player for a generic audio or video.",
            "itemtype": "method",
            "name": "initializeMedia",
            "params": [
                {
                    "name": "content_id",
                    "description": "the HTML id of the unique container of the media",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "it can be either <b>'audio'</b> or <b>'video'</b>",
                    "type": "String"
                }
            ],
            "class": "PlayersGeneral",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 519,
            "description": "This is the method that associates {{#crossLink \"PlayersGeneral/initializeActionOfMediaTimeUpdater:method\"}}{{/crossLink}} to the event of <b>timeupdate</b>. Notice that the method waits until he receives the event <b>loadedmetadata</b> before working.",
            "itemtype": "method",
            "name": "initializeMediaTimeUpdater",
            "params": [
                {
                    "name": "media",
                    "description": "HTML selector for the audio or video",
                    "type": "String"
                },
                {
                    "name": "reference_id",
                    "description": "HTML id of the unique container of the audio or video",
                    "type": "String"
                }
            ],
            "class": "PlayersGeneral",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 541,
            "description": "Stops a generic media, logging errors in the console.",
            "itemtype": "method",
            "name": "stopMedia",
            "params": [
                {
                    "name": "media",
                    "description": "HTML selector for the audio or video",
                    "type": "String"
                }
            ],
            "class": "PlayersGeneral",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 573,
            "description": "This method has the same cases of use of {{#crossLink \"PlayersAudioEditor/initializeActionOfMediaTimeUpdaterInAudioEditor:method\"}}{{/crossLink}}, with a couple of details more due to the more complicated environment present in {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}}:\n<ul>\n  <li>the passage from a component to another (the method called in this case is {{#crossLink \"VideoEditorPreview/playVideoEditorComponent:method\"}}{{/crossLink}}) must handle a <b>transition</b> of one second</li>\n  <li>it's necessary to hide and show the preview <b>progress bar</b> (see {{#crossLink \"VideoEditorPreviewAccessories/showVideoEditorPreviewComponentProgressBar:method\"}}{{/crossLink}}) positioning it with the help of the methods in {{#crossLink \"MediaElementEditorHorizontalTimelines\"}}{{/crossLink}}</li>\n  <li>the method needs also to update the <b>background audio track</b>, but only if it's present and if the <b>global preview time</b> is not greater than its duration.</li>\n</ul>",
            "itemtype": "method",
            "name": "initializeActionOfMediaTimeUpdaterInVideoEditor",
            "params": [
                {
                    "name": "media",
                    "description": "HTML selector for the video",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "unique identifier for the video component (see {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}})",
                    "type": "Number"
                },
                {
                    "name": "force_parsed_int",
                    "description": "forces the last second of the video; normally it's <i>false</i>, except the case in which the duration of the video is very close to the biggest lower integer (for instance, the duration is 10.01, which is very close to 10): in this case, the signal that the video ended <b>is not received directly by the current method</b>, but rather by the event handler <b>ended</b> initialized in the end of {{#crossLink \"PlayersVideoEditor/initializeVideoInVideoEditorPreview:method\"}}{{/crossLink}}",
                    "type": "Boolean"
                }
            ],
            "class": "PlayersVideoEditor",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 659,
            "description": "This is the method that associates {{#crossLink \"PlayersVideoEditor/initializeActionOfMediaTimeUpdaterInVideoEditor:method\"}}{{/crossLink}} to the event of <b>timeupdate</b>. Notice that the method waits until he receives the event <b>loadedmetadata</b> before working.",
            "itemtype": "method",
            "name": "initializeMediaTimeUpdaterInVideoEditor",
            "params": [
                {
                    "name": "media",
                    "description": "HTML selector for the audio or video",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "unique identifier of a video component (see {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}})",
                    "type": "Number"
                }
            ],
            "class": "PlayersVideoEditor",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 685,
            "description": "Initializes two sliders: one (JQueryUi single slider) for the <b>cursor</b>, and one (JQueryUi double slider) for the <b>cutting handles</b>. It also initializes how to handle the event <b>ended</b> associated to the video.",
            "itemtype": "method",
            "name": "initializeVideoInVideoEditorPreview",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the video component (see {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}})",
                    "type": "Number"
                }
            ],
            "class": "PlayersVideoEditor",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 764,
            "description": "Method that <b>updates the video cursor</b>, in case one of the two handles passes over the cursor (the cursor must follow the handle).",
            "itemtype": "method",
            "name": "selectVideoComponentCutterHandle",
            "params": [
                {
                    "name": "cutter",
                    "description": "the JQuery object representing the cutter for that particular component (see {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}})",
                    "type": "Object"
                },
                {
                    "name": "val",
                    "description": "the value to be assigned",
                    "type": "Number"
                }
            ],
            "class": "PlayersVideoEditor",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/players.js",
            "line": 776,
            "description": "Specific method to call if the event <b>ended</b> is fired on the video and we are not in the {{#crossLinkModule \"video-editor\"}}{{/crossLinkModule}} preview mode (unlike in {{#crossLink \"PlayersAudioEditor\"}}{{/crossLink}}, in this case it's separated by the method {{#crossLink \"PlayersVideoEditor/initializeVideoInVideoEditorPreview:method\"}}{{/crossLink}}, since it's more complicated.",
            "itemtype": "method",
            "name": "stopVideoInVideoEditorPreview",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the video component",
                    "type": "Number"
                }
            ],
            "class": "PlayersVideoEditor",
            "module": "players"
        },
        {
            "file": "app/assets/javascripts/profile.js",
            "line": 10,
            "description": "Initializes the handler of the login form.",
            "itemtype": "method",
            "name": "preloginDocumentReady",
            "class": "ProfilePrelogin",
            "module": "profile"
        },
        {
            "file": "app/assets/javascripts/profile.js",
            "line": 60,
            "description": "Initializes handler of purchase code in prelogin registration.",
            "itemtype": "method",
            "name": "purchaseCodeRegistrationDocumentReady",
            "class": "ProfilePrelogin",
            "module": "profile"
        },
        {
            "file": "app/assets/javascripts/profile.js",
            "line": 120,
            "description": "Initializes the javascript effects of the registration / modify profile form.",
            "itemtype": "method",
            "name": "profileDocumentReady",
            "class": "ProfileUsers",
            "module": "profile"
        },
        {
            "file": "app/assets/javascripts/search.js",
            "line": 10,
            "description": "Global initializer for the search engine.",
            "itemtype": "method",
            "name": "searchDocumentReady",
            "class": "SearchDocumentReady",
            "module": "search"
        },
        {
            "file": "app/assets/javascripts/search.js",
            "line": 20,
            "description": "Initializes the <b>clickable tags</b> allowing a filter on a research.",
            "itemtype": "method",
            "name": "searchDocumentReadyFilterByTag",
            "class": "SearchDocumentReady",
            "module": "search"
        },
        {
            "file": "app/assets/javascripts/search.js",
            "line": 42,
            "description": "Initializer for generic effects.",
            "itemtype": "method",
            "name": "searchDocumentReadyGeneral",
            "class": "SearchDocumentReady",
            "module": "search"
        },
        {
            "file": "app/assets/javascripts/search.js",
            "line": 83,
            "description": "Initializer for <b>search keyword</b> placeholders.",
            "itemtype": "method",
            "name": "searchDocumentReadyPlaceholders",
            "class": "SearchDocumentReady",
            "module": "search"
        },
        {
            "file": "app/assets/javascripts/tags.js",
            "line": 18,
            "description": "Adds a tag without using the suggestion (the case with the suggestion is handled by {{#crossLink \"TagsInitializers/initTagsAutocomplete:method\"}}{{/crossLink}}). In the particular case in which the user adds the tag <b>before</b> the autocomplete has shown the list of matches, this method calls a route from the backend that checks if the tag was present in the database: if yes, the tag gets colored differently.",
            "itemtype": "method",
            "name": "addTagWithoutSuggestion",
            "params": [
                {
                    "name": "input",
                    "description": "JQuery object for the tag input",
                    "type": "Object"
                },
                {
                    "name": "container",
                    "description": "JQuery object for the container",
                    "type": "Object"
                },
                {
                    "name": "tags_value",
                    "description": "JQuery object for the hidden input",
                    "type": "Object"
                }
            ],
            "class": "TagsAccessories",
            "module": "tags"
        },
        {
            "file": "app/assets/javascripts/tags.js",
            "line": 48,
            "description": "Adds a tag to the <b>hidden input</b>.",
            "itemtype": "method",
            "name": "addToTagsValue",
            "params": [
                {
                    "name": "word",
                    "description": "tag to be inserted",
                    "type": "String"
                },
                {
                    "name": "value_input",
                    "description": "JQuery object for the hidden input",
                    "type": "Object"
                }
            ],
            "class": "TagsAccessories",
            "module": "tags"
        },
        {
            "file": "app/assets/javascripts/tags.js",
            "line": 65,
            "description": "Checks if a tag is already present in the hidden input.",
            "itemtype": "method",
            "name": "checkNoTagDuplicates",
            "params": [
                {
                    "name": "word",
                    "description": "tag to be checked",
                    "type": "String"
                },
                {
                    "name": "container",
                    "description": "JQuery object for the container",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "TagsAccessories",
            "module": "tags"
        },
        {
            "file": "app/assets/javascripts/tags.js",
            "line": 83,
            "description": "Creates a new span box for a tag.",
            "itemtype": "method",
            "name": "createTagSpan",
            "params": [
                {
                    "name": "word",
                    "description": "tag to be created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "span element",
                "type": "Object"
            },
            "class": "TagsAccessories",
            "module": "tags"
        },
        {
            "file": "app/assets/javascripts/tags.js",
            "line": 97,
            "description": "Disables the tag input if the container is full.",
            "itemtype": "method",
            "name": "disableTagsInputTooHigh",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object for the container",
                    "type": "Object"
                }
            ],
            "class": "TagsAccessories",
            "module": "tags"
        },
        {
            "file": "app/assets/javascripts/tags.js",
            "line": 119,
            "description": "Generates a unique class for a given tag (containing underscores, and taking into consideration special characters).",
            "itemtype": "method",
            "name": "getUnivoqueClassForTag",
            "params": [
                {
                    "name": "word",
                    "description": "tag",
                    "type": "String"
                }
            ],
            "return": {
                "description": "unique class for that tag",
                "type": "String"
            },
            "class": "TagsAccessories",
            "module": "tags"
        },
        {
            "file": "app/assets/javascripts/tags.js",
            "line": 134,
            "description": "Removes a tag from the <b>hidden input</b>.",
            "itemtype": "method",
            "name": "removeFromTagsValue",
            "params": [
                {
                    "name": "word",
                    "description": "tag to be removed",
                    "type": "String"
                },
                {
                    "name": "value_input",
                    "description": "Jquery object for the hidden input",
                    "type": "Obbject"
                }
            ],
            "class": "TagsAccessories",
            "module": "tags"
        },
        {
            "file": "app/assets/javascripts/tags.js",
            "line": 151,
            "description": "Initializer for search autocompĺete.",
            "itemtype": "method",
            "name": "initSearchTagsAutocomplete",
            "params": [
                {
                    "name": "input",
                    "description": "HTML selector for the input",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "lesson or media_element",
                    "type": "String"
                }
            ],
            "class": "TagsInitializers",
            "module": "tags"
        },
        {
            "file": "app/assets/javascripts/tags.js",
            "line": 185,
            "description": "Initializer for tagging autocompĺete.",
            "itemtype": "method",
            "name": "initTagsAutocomplete",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object for the tags container",
                    "type": "Object"
                },
                {
                    "name": "item",
                    "description": "lesson or media_element",
                    "type": "String"
                }
            ],
            "class": "TagsInitializers",
            "module": "tags"
        },
        {
            "file": "app/assets/javascripts/tags.js",
            "line": 214,
            "description": "Global document ready for tags functionality.",
            "itemtype": "method",
            "name": "tagsDocumentReady",
            "class": "TagsInitializers",
            "module": "tags"
        },
        {
            "file": "app/assets/javascripts/uploader.js",
            "line": 12,
            "description": "Initializer for the loading form.",
            "itemtype": "method",
            "name": "uploaderDocumentReady",
            "class": "UploaderDocumentReady",
            "module": "uploader"
        },
        {
            "file": "app/assets/javascripts/uploader.js",
            "line": 105,
            "description": "Disables the loading form while uploading is working.",
            "itemtype": "method",
            "name": "disableUploadForm",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object representing the container",
                    "type": "Object"
                },
                {
                    "name": "window_caption",
                    "description": "message that is shown to the user if he tries to reload the window while the uploader is working",
                    "type": "String"
                }
            ],
            "class": "UploaderGlobal",
            "module": "uploader"
        },
        {
            "file": "app/assets/javascripts/uploader.js",
            "line": 123,
            "description": "Enables the loading form when uploading ended.",
            "itemtype": "method",
            "name": "enableUploadForm",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object representing the container",
                    "type": "Object"
                }
            ],
            "class": "UploaderGlobal",
            "module": "uploader"
        },
        {
            "file": "app/assets/javascripts/uploader.js",
            "line": 136,
            "description": "Handles correct uploading process (correct in the sense that the file is not too large and could correctly be received by the web server).",
            "itemtype": "method",
            "name": "uploadDone",
            "params": [
                {
                    "name": "selector",
                    "description": "HTML selector representing the container",
                    "type": "String"
                },
                {
                    "name": "errors",
                    "description": "an array of strings to be shown on the bottom of the loading popup",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "success callback",
                    "type": "Function"
                }
            ],
            "class": "UploaderGlobal",
            "module": "uploader"
        },
        {
            "file": "app/assets/javascripts/uploader.js",
            "line": 162,
            "description": "Handles 413 status error, file too large.",
            "itemtype": "method",
            "name": "uploadFileTooLarge",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object for the specific uploader (audio, video, image or document)",
                    "type": "Object"
                }
            ],
            "class": "UploaderGlobal",
            "module": "uploader"
        },
        {
            "file": "app/assets/javascripts/uploader.js",
            "line": 185,
            "description": "Handles the recursion of uploading animation, in a linear way, until a fixed time which is defined as 500 seconds. It is called by {{#crossLink \"UploaderLoadingBar/recursionUploadingBar:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "linearRecursionUploadingBar",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object for the specific uploader (audio, video, image or document)",
                    "type": "Object"
                },
                {
                    "name": "time",
                    "description": "current time in the recursion",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "linear coefficient of recursion",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "starting point of recursion",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "function to be fired after the animation is over",
                    "type": "Function"
                }
            ],
            "class": "UploaderLoadingBar",
            "module": "uploader"
        },
        {
            "file": "app/assets/javascripts/uploader.js",
            "line": 206,
            "description": "Handles the recursion of uploading animation.",
            "itemtype": "method",
            "name": "recursionUploadingBar",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object for the specific uploader (audio, video, image or document)",
                    "type": "Object"
                },
                {
                    "name": "time",
                    "description": "current time in the recursion",
                    "type": "Number"
                }
            ],
            "class": "UploaderLoadingBar",
            "module": "uploader"
        },
        {
            "file": "app/assets/javascripts/uploader.js",
            "line": 234,
            "description": "Shows a percentage of the circular loading bar.",
            "itemtype": "method",
            "name": "showPercentUploadingBar",
            "params": [
                {
                    "name": "container",
                    "description": "JQuery object for the specific uploader (audio, video, image or document)",
                    "type": "Object"
                },
                {
                    "name": "percent",
                    "description": "percentage of loading shown",
                    "type": "Float"
                }
            ],
            "class": "UploaderLoadingBar",
            "module": "uploader"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 87,
            "description": "Adds an image component to the timeline, contructing an empty <b>preview</b>, <b>cutter</b> and <b>component</b>, and then filling them (see the commentaries inside the code). This method is called by {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyAddComponent:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addImageComponentInVideoEditor",
            "params": [
                {
                    "name": "image_id",
                    "description": "the id of the image in the database",
                    "type": "Number"
                },
                {
                    "name": "component",
                    "description": "HTML code corresponding to the already built <b>miniature</b> of the image",
                    "type": "String"
                },
                {
                    "name": "preview",
                    "description": "HTML code corresponding to the already built <b>content of the preview</b> for the image",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "the duration in seconds of the image component",
                    "type": "Number"
                }
            ],
            "class": "VideoEditorAddComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 155,
            "description": "Adds a text component to the timeline, contructing an empty <b>preview</b>, <b>cutter</b> and <b>component</b>, and then filling them (see the commentaries inside the code). This method is called by {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyAddComponent:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addTextComponentInVideoEditor",
            "params": [
                {
                    "name": "component",
                    "description": "HTML code corresponding to the already built <b>miniature</b> of the text",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "the text content",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "the duration in seconds of the image component",
                    "type": "Number"
                },
                {
                    "name": "background_color",
                    "description": "the class corresponding to the color chosen for the background",
                    "type": "String"
                },
                {
                    "name": "text_color",
                    "description": "the class corresponding to the color chosen for the text font",
                    "type": "String"
                }
            ],
            "class": "VideoEditorAddComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 231,
            "description": "Adds a video component to the timeline, contructing an empty <b>preview</b>, <b>cutter</b> and <b>component</b>, and then filling them (see the commentaries inside the code). This method is called by {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyAddComponent:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addVideoComponentInVideoEditor",
            "params": [
                {
                    "name": "video_id",
                    "description": "the id of the video in the database",
                    "type": "Number"
                },
                {
                    "name": "webm",
                    "description": "path of the webm attached of the video",
                    "type": "String"
                },
                {
                    "name": "mp4",
                    "description": "path of the mp4 attached of the video",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "HTML code corresponding to the already built <b>miniature</b> of the video",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "the duration in seconds of the video component (initially the values <b>from</b> and <b>to</b> are respectively <b>0</b> and <b>duration</b>)",
                    "type": "Number"
                }
            ],
            "class": "VideoEditorAddComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 314,
            "description": "Changes the duration of a given component, and updates all the global durations and data.",
            "itemtype": "method",
            "name": "changeDurationVideoEditorComponent",
            "params": [
                {
                    "name": "component_id",
                    "description": "the HTML id of the component",
                    "type": "String"
                },
                {
                    "name": "new_duration",
                    "description": "the new duration (the old one is stored as data inside the HTML of the component)",
                    "type": "Number"
                }
            ],
            "class": "VideoEditorComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 340,
            "description": "Clears all the inputs of a component which refer to specific types (this is used in {{#crossLink \"VideoEditorReplaceComponents\"}}{{/crossLink}}, when the user replaces a component with another of a different type).",
            "itemtype": "method",
            "name": "clearSpecificVideoEditorComponentParameters",
            "params": [
                {
                    "name": "component_id",
                    "description": "the HTML id of the component",
                    "type": "String"
                }
            ],
            "class": "VideoEditorComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 358,
            "description": "Function that creates a single input field to be inserted in the empty audio component during the process of construction of a new one (similar to {{#crossLink \"AudioEditorComponents/fillAudioEditorSingleParameter:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "fillVideoEditorSingleParameter",
            "params": [
                {
                    "name": "input",
                    "description": "the specific input to be filled (for example, <i>video_id</i>, <i>from</i>, <i>duration</i>, or <i>to</i>)",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "the identifier of the component",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "the HTML value to be assigned to the input",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the resulting input written in HTML",
                "type": "String"
            },
            "class": "VideoEditorComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 371,
            "description": "Highlights the small header of a component.",
            "itemtype": "method",
            "name": "highlightAndUpdateVideoComponentIcon",
            "params": [
                {
                    "name": "component_id",
                    "description": "the HTML id of the component",
                    "type": "String"
                }
            ],
            "class": "VideoEditorComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 381,
            "description": "Reloads all the positions of components in the timeline; used in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyRemoveComponent:method\"}}{{/crossLink}} (removing a component) and in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyInitialization:method\"}}{{/crossLink}} (sorting components).",
            "itemtype": "method",
            "name": "reloadVideoEditorComponentPositions",
            "class": "VideoEditorComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 395,
            "description": "Resets the visibility of all the transitions between components (because the last transition is not visible); used in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyRemoveComponent:method\"}}{{/crossLink}} (removing a component) and in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyInitialization:method\"}}{{/crossLink}} (sorting components).",
            "itemtype": "method",
            "name": "resetVisibilityOfVideoEditorTransitions",
            "class": "VideoEditorComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 411,
            "description": "Selects the component with a delay, after passing with the mouse. Used in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyComponentsCommon:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "startVideoEditorPreviewClipWithDelay",
            "params": [
                {
                    "name": "component_id",
                    "description": "the HTML id of the component",
                    "type": "String"
                }
            ],
            "class": "VideoEditorComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 430,
            "description": "Closes the cutter that is visible at the moment, regardless of its type.",
            "itemtype": "method",
            "name": "closeGenericVideoComponentCutter",
            "class": "VideoEditorCutters",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 451,
            "description": "Commits the changes of a generic cutter.",
            "itemtype": "method",
            "name": "commitVideoComponentVideoCutter",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the component",
                    "type": "Number"
                }
            ],
            "class": "VideoEditorCutters",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 469,
            "description": "Cuts the left side of a video component.",
            "itemtype": "method",
            "name": "cutVideoComponentLeftSide",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the video component",
                    "type": "Number"
                },
                {
                    "name": "pos",
                    "description": "the new value for the input <i>from</i>",
                    "type": "Number"
                }
            ],
            "class": "VideoEditorCutters",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 482,
            "description": "Cuts the right side of a video component.",
            "itemtype": "method",
            "name": "cutVideoComponentRightSide",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the video component",
                    "type": "Number"
                },
                {
                    "name": "pos",
                    "description": "the new value for the input <i>to</i>",
                    "type": "Number"
                }
            ],
            "class": "VideoEditorCutters",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 495,
            "description": "Scrolls (using {{#crossLink \"MediaElementEditorHorizontalTimelines\"}}{{/crossLink}}) and shows the cutter for a <b>video</b> component. The similar functionality for <b>image</b> and <b>text</b> components is initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyCutters:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "showVideoEditorCutter",
            "params": [
                {
                    "name": "component_id",
                    "description": "the HTML id of the component",
                    "type": "String"
                }
            ],
            "class": "VideoEditorCutters",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 516,
            "description": "Similar to {{#crossLink \"VideoEditorComponents/startVideoEditorPreviewClipWithDelay:method\"}}{{/crossLink}}, but without delay (used for sorting and opening cutter).",
            "itemtype": "method",
            "name": "startVideoEditorPreviewClip",
            "params": [
                {
                    "name": "component_id",
                    "description": "the HTML id of the component",
                    "type": "String"
                }
            ],
            "class": "VideoEditorCutters",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 532,
            "description": "Global initializer.",
            "itemtype": "method",
            "name": "videoEditorDocumentReady",
            "class": "VideoEditorDocumentReady",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 549,
            "description": "Initializer for adding components (this method calls both classes {{#crossLink \"VideoEditorAddComponents\"}}{{/crossLink}} and {{#crossLink \"VideoEditorReplaceComponents\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "videoEditorDocumentReadyAddComponent",
            "class": "VideoEditorDocumentReady",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 638,
            "description": "Initializes functionality for audio track.",
            "itemtype": "method",
            "name": "videoEditorDocumentReadyAudioTrack",
            "class": "VideoEditorDocumentReady",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 678,
            "description": "Initializer for functionalities common to all types of components.",
            "itemtype": "method",
            "name": "videoEditorDocumentReadyComponentsCommon",
            "class": "VideoEditorDocumentReady",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 707,
            "description": "Initializer for cutters.",
            "itemtype": "method",
            "name": "videoEditorDocumentReadyCutters",
            "class": "VideoEditorDocumentReady",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 823,
            "description": "Initializer for galleries.",
            "itemtype": "method",
            "name": "videoEditorDocumentReadyGalleries",
            "class": "VideoEditorDocumentReady",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 897,
            "description": "Initializer for sorting and other JQueryUi plugins.",
            "itemtype": "method",
            "name": "videoEditorDocumentReadyInitialization",
            "class": "VideoEditorDocumentReady",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 942,
            "description": "Initializer for preview mode (see {{#crossLink \"VideoEditorPreview\"}}{{/crossLink}} and {{#crossLink \"VideoEditorPreviewAccessories\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "videoEditorDocumentReadyPreview",
            "class": "VideoEditorDocumentReady",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1048,
            "description": "Initializer for the functionality of <b>removing a component</b> from the timeline (is uses {{#crossLink \"VideoEditorComponents/changeDurationVideoEditorComponent:method\"}}{{/crossLink}} passing <i>new duration = 0</i>).",
            "itemtype": "method",
            "name": "videoEditorDocumentReadyRemoveComponent",
            "class": "VideoEditorDocumentReady",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1079,
            "description": "Initializes the <b>text component editor</b> (see {{#crossLink \"VideoEditorTextComponentEditor\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "videoEditorDocumentReadyTextComponentEditor",
            "class": "VideoEditorDocumentReady",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1108,
            "description": "Centers the gallery when shown.",
            "itemtype": "method",
            "name": "calculateNewPositionGalleriesInVideoEditor",
            "class": "VideoEditorGalleries",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1118,
            "description": "Opposite of {{#crossLink \"VideoEditorGalleries/showGalleryInVideoEditor:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "closeGalleryInVideoEditor",
            "params": [
                {
                    "name": "type",
                    "description": "it can be either 'mixed' or 'audio'",
                    "type": "String"
                }
            ],
            "class": "VideoEditorGalleries",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1132,
            "description": "Opens a chosen gallery.",
            "itemtype": "method",
            "name": "showGalleryInVideoEditor",
            "params": [
                {
                    "name": "type",
                    "description": "it can be either 'mixed' or 'audio'",
                    "type": "String"
                }
            ],
            "class": "VideoEditorGalleries",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1146,
            "description": "Switches between <b>video gallery</b>, <b>image gallery</b> and <b>text component editor</b> in the component editor.",
            "itemtype": "method",
            "name": "switchToOtherGalleryInMixedGalleryInVideoEditor",
            "params": [
                {
                    "name": "type",
                    "description": "it can be either 'mixed' or 'audio'",
                    "type": "String"
                }
            ],
            "class": "VideoEditorGalleries",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1172,
            "description": "Returns the first component in the timeline.",
            "itemtype": "method",
            "name": "getFirstVideoEditorComponent",
            "return": {
                "description": "the first component",
                "type": "Object"
            },
            "class": "VideoEditorGeneral",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1182,
            "description": "Returns the last component in the timeline.",
            "itemtype": "method",
            "name": "getLastVideoEditorComponent",
            "return": {
                "description": "the last component",
                "type": "Object"
            },
            "class": "VideoEditorGeneral",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1193,
            "description": "Method that extracts the <b>unique identifier</b> of a component, starting indifferently from the component id, the cutter id, or the preview id.",
            "itemtype": "method",
            "name": "getVideoComponentIdentifier",
            "params": [
                {
                    "name": "item_id",
                    "description": "the HTML id of either the <i>component</i>, the <i>preview</i> or the <i>cutter</i>",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the unique identifier of the component",
                "type": "Number"
            },
            "class": "VideoEditorGeneral",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1209,
            "description": "Checks if the HTML5 video inside a <b>video component</b> has been loaded, and if not it loads it.",
            "itemtype": "method",
            "name": "loadVideoComponentIfNotLoadedYet",
            "params": [
                {
                    "name": "component_id",
                    "description": "the HTML id of the video component",
                    "type": "String"
                }
            ],
            "class": "VideoEditorGeneral",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1226,
            "description": "Checks if an optional audio track has been set by the user.",
            "itemtype": "method",
            "name": "videoEditorWithAudioTrack",
            "return": {
                "description": "true if there is an audio track",
                "type": "Boolean"
            },
            "class": "VideoEditorGeneral",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1240,
            "description": "Automatic increase for the global preview current time (used when playing image or text components).",
            "itemtype": "method",
            "name": "automaticIncreaseVideoEditorPreviewTimer",
            "params": [
                {
                    "name": "time",
                    "description": "the global time before calling the method",
                    "type": "Number"
                },
                {
                    "name": "total_length",
                    "description": "the total length of the component",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "the callback to be executed after the time update",
                    "type": "Function"
                }
            ],
            "class": "VideoEditorPreview",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1261,
            "description": "Increases of one step the global preview time (typically used in {{#crossLink \"PlayersVideoEditor/initializeActionOfMediaTimeUpdaterInVideoEditor:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "increaseVideoEditorPreviewTimer",
            "params": [
                {
                    "name": "with_component",
                    "description": "if true, it updates also the local time of the selected component",
                    "type": "Boolean"
                }
            ],
            "class": "VideoEditorPreview",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1284,
            "description": "Opens the preview mode with all its graphical effects. The similar functionality to close the preview mode is initialized in {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyPreview:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "openPreviewModeInVideoEditor",
            "class": "VideoEditorPreview",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1327,
            "description": "Plays a component and handles the transition to the next one (if there is any). In case the component is of type <b>image</b> or <b>text</b>, the time increase is handled by {{#crossLink \"VideoEditorPreview/automaticIncreaseVideoEditorPreviewTimer:method\"}}{{/crossLink}}; if the component is of type <b>video</b> the transition is handled by {{#crossLink \"PlayersVideoEditor/initializeActionOfMediaTimeUpdaterInVideoEditor:method\"}}{{/crossLink}} and the time increase by {{#crossLink \"VideoEditorPreview/increaseVideoEditorPreviewTimer:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "playVideoEditorComponent",
            "params": [
                {
                    "name": "component",
                    "description": "the component to be played",
                    "type": "Object"
                },
                {
                    "name": "with_scroll",
                    "description": "if true, it uses {{#crossLink \"VideoEditorScrollPain/followPreviewComponentsWithHorizontalScrollInVideoEditor:method\"}}{{/crossLink}} to follow the timeline with the scroll.",
                    "type": "Boolean"
                }
            ],
            "class": "VideoEditorPreview",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1399,
            "description": "Starts the preview from the selected component.",
            "itemtype": "method",
            "name": "startVideoEditorGlobalPreview",
            "class": "VideoEditorPreview",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1430,
            "description": "Calculates the amount of seconds before the current position in the global preview (used for {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyAudioTrack:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "calculateVideoComponentStartSecondInVideoEditor",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the current component in preview mode",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the amount of seconds before the current global time in preview",
                "type": "Number"
            },
            "class": "VideoEditorPreviewAccessories",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1454,
            "description": "Hides the component progress bar.",
            "itemtype": "method",
            "name": "hideVideoEditorPreviewComponentProgressBar",
            "class": "VideoEditorPreviewAccessories",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1464,
            "description": "Selects a video component with a specific time in preview mode.",
            "itemtype": "method",
            "name": "selectVideoComponentInPreview",
            "params": [
                {
                    "name": "component",
                    "description": "the component",
                    "type": "Object"
                },
                {
                    "name": "time",
                    "description": "the local time to be selected",
                    "type": "Number"
                }
            ],
            "class": "VideoEditorPreviewAccessories",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1482,
            "description": "Sets the times of all previous and following components. The normal status of the global preview is with time = 0 for each component which is not selected.",
            "itemtype": "method",
            "name": "setVisualTimesVideoEditorPreview",
            "params": [
                {
                    "name": "component",
                    "description": "the selected component",
                    "type": "Object"
                },
                {
                    "name": "time",
                    "description": "the time to be set in the selected component",
                    "type": "Object"
                }
            ],
            "class": "VideoEditorPreviewAccessories",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1513,
            "description": "Shows the arrows to switch between components in preview mode.",
            "itemtype": "method",
            "name": "showVideoEditorPreviewArrowToComponents",
            "class": "VideoEditorPreviewAccessories",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1531,
            "description": "Shows the progress bar for a given component. This bar is used to set the time of the component (using {{#crossLink \"VideoEditorPreviewAccessories/selectVideoComponentInPreview:method\"}}{{/crossLink}}), and while the preview is playing to show the progress of the component. Remember that the progress bar is the same for each component, and it is initialized and destroyed each time. This method uses {{#crossLink \"MediaElementEditorHorizontalTimelines\"}}{{/crossLink}} for the correct positioning of the progress bar.",
            "itemtype": "method",
            "name": "showVideoEditorPreviewComponentProgressBar",
            "params": [
                {
                    "name": "identifier",
                    "description": "the unique identifier of the component",
                    "type": "Number"
                },
                {
                    "name": "position",
                    "description": "the position (1...5) of the progress bar",
                    "type": "Number"
                }
            ],
            "class": "VideoEditorPreviewAccessories",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1565,
            "description": "Replaces a generig component with an image component, contructing an empty <b>preview</b>, <b>cutter</b> and editing the <b>component</b> (see the commentaries inside the code). This method is called by {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyAddComponent:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "replaceImageComponentInVideoEditor",
            "params": [
                {
                    "name": "image_id",
                    "description": "the id of the image in the database",
                    "type": "Number"
                },
                {
                    "name": "component",
                    "description": "HTML code corresponding to the already built <b>miniature</b> of the image",
                    "type": "String"
                },
                {
                    "name": "preview",
                    "description": "HTML code corresponding to the already built <b>content of the preview</b> for the image",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "HTML identifier for the replaced component",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "the duration in seconds of the image component",
                    "type": "Number"
                }
            ],
            "class": "VideoEditorReplaceComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1605,
            "description": "Replaces a generic component with a text component, contructing an empty <b>preview</b>, <b>cutter</b> and editing the <b>component</b> (see the commentaries inside the code). This method is called by {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyAddComponent:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "replaceTextComponentInVideoEditor",
            "params": [
                {
                    "name": "component",
                    "description": "HTML code corresponding to the already built <b>miniature</b> of the text",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "the text content",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "HTML identifier for the replaced component",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "the duration in seconds of the image component",
                    "type": "Number"
                },
                {
                    "name": "background_color",
                    "description": "the class corresponding to the color chosen for the background",
                    "type": "String"
                },
                {
                    "name": "text_color",
                    "description": "the class corresponding to the color chosen for the text font",
                    "type": "String"
                }
            ],
            "class": "VideoEditorReplaceComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1653,
            "description": "Replaces a generic component with a video component, contructing an empty <b>preview</b>, <b>cutter</b> and editing the <b>component</b> (see the commentaries inside the code). This method is called by {{#crossLink \"VideoEditorDocumentReady/videoEditorDocumentReadyAddComponent:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "replaceVideoComponentInVideoEditor",
            "params": [
                {
                    "name": "video_id",
                    "description": "the id of the video in the database",
                    "type": "Number"
                },
                {
                    "name": "webm",
                    "description": "path of the webm attached of the video",
                    "type": "String"
                },
                {
                    "name": "mp4",
                    "description": "path of the mp4 attached of the video",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "HTML code corresponding to the already built <b>miniature</b> of the video",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "HTML identifier for the replaced component",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "the duration in seconds of the video component (initially the values <b>from</b> and <b>to</b> are respectively <b>0</b> and <b>duration</b>)",
                    "type": "Number"
                }
            ],
            "class": "VideoEditorReplaceComponents",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1708,
            "description": "Method that uses the scroll to keep visible the current component in the timeline. It uses {{#crossLink \"MediaElementEditorHorizontalTimelines\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "followPreviewComponentsWithHorizontalScrollInVideoEditor",
            "class": "VideoEditorScrollPain",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1758,
            "description": "Resets the text component editor when it's closed.",
            "itemtype": "method",
            "name": "resetVideoEditorTextComponent",
            "class": "VideoEditorTextComponentEditor",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1773,
            "description": "Switches to a different background color the text component editor.",
            "itemtype": "method",
            "name": "switchTextComponentBackgroundColor",
            "params": [
                {
                    "name": "old_color",
                    "description": "the class corresponding to the old color chosen for the background",
                    "type": "String"
                },
                {
                    "name": "new_color",
                    "description": "the class corresponding to the new color chosen for the background",
                    "type": "String"
                }
            ],
            "class": "VideoEditorTextComponentEditor",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/video_editor.js",
            "line": 1787,
            "description": "Switches to a different text color the text component editor.",
            "itemtype": "method",
            "name": "switchTextComponentTextColor",
            "params": [
                {
                    "name": "old_color",
                    "description": "the class corresponding to the old color chosen for the text font",
                    "type": "String"
                },
                {
                    "name": "new_color",
                    "description": "the class corresponding to the new color chosen for the text font",
                    "type": "String"
                }
            ],
            "class": "VideoEditorTextComponentEditor",
            "module": "video-editor"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 14,
            "description": "Global initializer.",
            "itemtype": "method",
            "name": "virtualClassroomDocumentReady",
            "class": "VirtualClassroomDocumentReady",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 27,
            "description": "Initializer for icons and buttons.",
            "itemtype": "method",
            "name": "virtualClassroomDocumentReadyIconsAndButtons",
            "class": "VirtualClassroomDocumentReady",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 82,
            "description": "Initializer for multiple lessons loading.",
            "itemtype": "method",
            "name": "virtualClassroomDocumentReadyMultipleLessonLoading",
            "class": "VirtualClassroomDocumentReady",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 131,
            "description": "Initializer for playlist.",
            "itemtype": "method",
            "name": "virtualClassroomDocumentReadyPlaylist",
            "class": "VirtualClassroomDocumentReady",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 171,
            "description": "Initializer for popup sending the public link of a lesson.",
            "itemtype": "method",
            "name": "virtualClassroomDocumentReadySendLink",
            "class": "VirtualClassroomDocumentReady",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 260,
            "description": "Gets the highest zIndex value among elements of a given class.",
            "itemtype": "method",
            "name": "getMaximumZIndex",
            "params": [
                {
                    "name": "a_class",
                    "description": "HTML class name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "highest zIndex value",
                "type": "Number"
            },
            "class": "VirtualClassroomJavaScriptAnimations",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 278,
            "description": "Initializes the functionality of dragging a single lesson into the playlist.",
            "itemtype": "method",
            "name": "initializeDraggableVirtualClassroomLesson",
            "params": [
                {
                    "name": "id",
                    "description": "HTML id of the lesson",
                    "type": "String"
                }
            ],
            "class": "VirtualClassroomJavaScriptAnimations",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 319,
            "description": "Initialize playlist container (using <i>JQueryUi sortable</i>)and jScrollPane.",
            "itemtype": "method",
            "name": "initializePlaylist",
            "class": "VirtualClassroomJavaScriptAnimations",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 380,
            "description": "Uses together {{#crossLink \"VirtualClassroomJavaScriptAnimations/initializeDraggableVirtualClassroomLesson:method\"}}{{/crossLink}} and {{#crossLink \"VirtualClassroomJavaScriptAnimations/initializePlaylist:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "initializeVirtualClassroom",
            "class": "VirtualClassroomJavaScriptAnimations",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 400,
            "description": "Initializer for lessons that can't be loaded from the multiple lessons loader.",
            "itemtype": "method",
            "name": "initializeNotAvailableLessonsToLoadQuick",
            "class": "VirtualClassroomMultipleLoading",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 413,
            "description": "Initializer for the JScrollPain in the multiple lessons loader (event infinite scroll to load more lessons).",
            "itemtype": "method",
            "name": "initializeScrollPaneQuickLessonSelector",
            "class": "VirtualClassroomMultipleLoading",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 432,
            "description": "Add email to recipients list on email add button (+).",
            "itemtype": "method",
            "name": "addEmailToVirtualClassroomSendLessonLinkSelector",
            "class": "VirtualClassroomSendLink",
            "module": "virtual-classroom"
        },
        {
            "file": "app/assets/javascripts/virtual_classroom.js",
            "line": 449,
            "description": "Resets the spaces between the emails sent.",
            "itemtype": "method",
            "name": "resetVirtualClassroomSendLinkLines",
            "class": "VirtualClassroomSendLink",
            "module": "virtual-classroom"
        }
    ],
    "warnings": []
}